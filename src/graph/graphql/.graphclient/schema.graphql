schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Query {
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bundle
  bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: Bundle_orderBy
    orderDirection: OrderDirection
    where: Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bundle!]!
  factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Factory
  factories(
    skip: Int = 0
    first: Int = 100
    orderBy: Factory_orderBy
    orderDirection: OrderDirection
    where: Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Factory!]!
  hourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HourData
  hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: HourData_orderBy
    orderDirection: OrderDirection
    where: HourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HourData!]!
  dayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DayData
  dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: DayData_orderBy
    orderDirection: OrderDirection
    where: DayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DayData!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenHourData
  tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenHourData_orderBy
    orderDirection: OrderDirection
    where: TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenHourData!]!
  tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenDayData
  tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenDayData_orderBy
    orderDirection: OrderDirection
    where: TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenDayData!]!
  pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pair
  pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: Pair_orderBy
    orderDirection: OrderDirection
    where: Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pair!]!
  pairHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairHourData
  pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PairHourData_orderBy
    orderDirection: OrderDirection
    where: PairHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairHourData!]!
  pairDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairDayData
  pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PairDayData_orderBy
    orderDirection: OrderDirection
    where: PairDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairDayData!]!
  liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPosition
  liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPosition_orderBy
    orderDirection: OrderDirection
    where: LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPosition!]!
  liquidityPositionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPositionSnapshot
  liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPositionSnapshot_orderBy
    orderDirection: OrderDirection
    where: LiquidityPositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPositionSnapshot!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Mint
  mints(
    skip: Int = 0
    first: Int = 100
    orderBy: Mint_orderBy
    orderDirection: OrderDirection
    where: Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Mint!]!
  burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Burn
  burns(
    skip: Int = 0
    first: Int = 100
    orderBy: Burn_orderBy
    orderDirection: OrderDirection
    where: Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Burn!]!
  swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Swap
  swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Swap_orderBy
    orderDirection: OrderDirection
    where: Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Swap!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  uniswapFactory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapFactory
  uniswapFactories(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapFactory_orderBy
    orderDirection: OrderDirection
    where: UniswapFactory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapFactory!]!
  uniswapDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapDayData
  uniswapDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapDayData_orderBy
    orderDirection: OrderDirection
    where: UniswapDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapDayData!]!
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tick
  ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Tick_orderBy
    orderDirection: OrderDirection
    where: Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Tick!]!
  position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Position
  positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    where: Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Position!]!
  positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionSnapshot
  positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionSnapshot_orderBy
    orderDirection: OrderDirection
    where: PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionSnapshot!]!
  collect(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Collect
  collects(
    skip: Int = 0
    first: Int = 100
    orderBy: Collect_orderBy
    orderDirection: OrderDirection
    where: Collect_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Collect!]!
  flash(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Flash
  flashes(
    skip: Int = 0
    first: Int = 100
    orderBy: Flash_orderBy
    orderDirection: OrderDirection
    where: Flash_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Flash!]!
  algebraDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AlgebraDayData
  algebraDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AlgebraDayData_orderBy
    orderDirection: OrderDirection
    where: AlgebraDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AlgebraDayData!]!
  poolDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolDayData
  poolDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolDayData_orderBy
    orderDirection: OrderDirection
    where: PoolDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolDayData!]!
  poolFeeData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolFeeData
  poolFeeDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolFeeData_orderBy
    orderDirection: OrderDirection
    where: PoolFeeData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolFeeData!]!
  poolHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolHourData
  poolHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolHourData_orderBy
    orderDirection: OrderDirection
    where: PoolHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolHourData!]!
  tickHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TickHourData
  tickHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: TickHourData_orderBy
    orderDirection: OrderDirection
    where: TickHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TickHourData!]!
  tickDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TickDayData
  tickDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: TickDayData_orderBy
    orderDirection: OrderDirection
    where: TickDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TickDayData!]!
  feeHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeeHourData
  feeHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FeeHourData_orderBy
    orderDirection: OrderDirection
    where: FeeHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeeHourData!]!
  pancakeFactory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PancakeFactory
  pancakeFactories(
    skip: Int = 0
    first: Int = 100
    orderBy: PancakeFactory_orderBy
    orderDirection: OrderDirection
    where: PancakeFactory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PancakeFactory!]!
  pancakeDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PancakeDayData
  pancakeDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PancakeDayData_orderBy
    orderDirection: OrderDirection
    where: PancakeDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PancakeDayData!]!
  tokenSearch(
    text: String!
    first: Int = 100
    skip: Int = 0
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    where: Token_filter
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  pairSearch(
    text: String!
    first: Int = 100
    skip: Int = 0
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    where: Pair_filter
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pair!]!
  userSearch(
    text: String!
    first: Int = 100
    skip: Int = 0
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    where: User_filter
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
}

type Subscription {
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bundle
  bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: Bundle_orderBy
    orderDirection: OrderDirection
    where: Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bundle!]!
  factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Factory
  factories(
    skip: Int = 0
    first: Int = 100
    orderBy: Factory_orderBy
    orderDirection: OrderDirection
    where: Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Factory!]!
  hourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HourData
  hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: HourData_orderBy
    orderDirection: OrderDirection
    where: HourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HourData!]!
  dayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DayData
  dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: DayData_orderBy
    orderDirection: OrderDirection
    where: DayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DayData!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenHourData
  tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenHourData_orderBy
    orderDirection: OrderDirection
    where: TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenHourData!]!
  tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenDayData
  tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenDayData_orderBy
    orderDirection: OrderDirection
    where: TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenDayData!]!
  pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pair
  pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: Pair_orderBy
    orderDirection: OrderDirection
    where: Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pair!]!
  pairHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairHourData
  pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PairHourData_orderBy
    orderDirection: OrderDirection
    where: PairHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairHourData!]!
  pairDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairDayData
  pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PairDayData_orderBy
    orderDirection: OrderDirection
    where: PairDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairDayData!]!
  liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPosition
  liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPosition_orderBy
    orderDirection: OrderDirection
    where: LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPosition!]!
  liquidityPositionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPositionSnapshot
  liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPositionSnapshot_orderBy
    orderDirection: OrderDirection
    where: LiquidityPositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPositionSnapshot!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Mint
  mints(
    skip: Int = 0
    first: Int = 100
    orderBy: Mint_orderBy
    orderDirection: OrderDirection
    where: Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Mint!]!
  burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Burn
  burns(
    skip: Int = 0
    first: Int = 100
    orderBy: Burn_orderBy
    orderDirection: OrderDirection
    where: Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Burn!]!
  swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Swap
  swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Swap_orderBy
    orderDirection: OrderDirection
    where: Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Swap!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  uniswapFactory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapFactory
  uniswapFactories(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapFactory_orderBy
    orderDirection: OrderDirection
    where: UniswapFactory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapFactory!]!
  uniswapDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapDayData
  uniswapDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapDayData_orderBy
    orderDirection: OrderDirection
    where: UniswapDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapDayData!]!
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tick
  ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Tick_orderBy
    orderDirection: OrderDirection
    where: Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Tick!]!
  position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Position
  positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    where: Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Position!]!
  positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionSnapshot
  positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionSnapshot_orderBy
    orderDirection: OrderDirection
    where: PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionSnapshot!]!
  collect(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Collect
  collects(
    skip: Int = 0
    first: Int = 100
    orderBy: Collect_orderBy
    orderDirection: OrderDirection
    where: Collect_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Collect!]!
  flash(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Flash
  flashes(
    skip: Int = 0
    first: Int = 100
    orderBy: Flash_orderBy
    orderDirection: OrderDirection
    where: Flash_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Flash!]!
  algebraDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AlgebraDayData
  algebraDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AlgebraDayData_orderBy
    orderDirection: OrderDirection
    where: AlgebraDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AlgebraDayData!]!
  poolDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolDayData
  poolDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolDayData_orderBy
    orderDirection: OrderDirection
    where: PoolDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolDayData!]!
  poolFeeData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolFeeData
  poolFeeDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolFeeData_orderBy
    orderDirection: OrderDirection
    where: PoolFeeData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolFeeData!]!
  poolHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolHourData
  poolHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolHourData_orderBy
    orderDirection: OrderDirection
    where: PoolHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolHourData!]!
  tickHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TickHourData
  tickHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: TickHourData_orderBy
    orderDirection: OrderDirection
    where: TickHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TickHourData!]!
  tickDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TickDayData
  tickDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: TickDayData_orderBy
    orderDirection: OrderDirection
    where: TickDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TickDayData!]!
  feeHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeeHourData
  feeHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FeeHourData_orderBy
    orderDirection: OrderDirection
    where: FeeHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeeHourData!]!
  pancakeFactory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PancakeFactory
  pancakeFactories(
    skip: Int = 0
    first: Int = 100
    orderBy: PancakeFactory_orderBy
    orderDirection: OrderDirection
    where: PancakeFactory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PancakeFactory!]!
  pancakeDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PancakeDayData
  pancakeDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PancakeDayData_orderBy
    orderDirection: OrderDirection
    where: PancakeDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PancakeDayData!]!
}

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

type Bundle {
  id: ID!
  ethPrice: BigDecimal!
  maticPriceUSD: BigDecimal!
  bnbPrice: BigDecimal!
}

input Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: BigDecimal
  ethPrice_not: BigDecimal
  ethPrice_gt: BigDecimal
  ethPrice_lt: BigDecimal
  ethPrice_gte: BigDecimal
  ethPrice_lte: BigDecimal
  ethPrice_in: [BigDecimal!]
  ethPrice_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bundle_filter]
  or: [Bundle_filter]
  maticPriceUSD: BigDecimal
  maticPriceUSD_not: BigDecimal
  maticPriceUSD_gt: BigDecimal
  maticPriceUSD_lt: BigDecimal
  maticPriceUSD_gte: BigDecimal
  maticPriceUSD_lte: BigDecimal
  maticPriceUSD_in: [BigDecimal!]
  maticPriceUSD_not_in: [BigDecimal!]
  bnbPrice: BigDecimal
  bnbPrice_not: BigDecimal
  bnbPrice_gt: BigDecimal
  bnbPrice_lt: BigDecimal
  bnbPrice_gte: BigDecimal
  bnbPrice_lte: BigDecimal
  bnbPrice_in: [BigDecimal!]
  bnbPrice_not_in: [BigDecimal!]
}

enum Bundle_orderBy {
  id
  ethPrice
  maticPriceUSD
  bnbPrice
}

type Burn {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  pair: Pair!
  liquidity: BigDecimal!
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  to: Bytes
  logIndex: BigInt
  amountUSD: BigDecimal
  complete: Boolean!
  feeTo: Bytes
  feeLiquidity: BigDecimal
  needsComplete: Boolean!
  pool: Pool!
  token0: Token!
  token1: Token!
  owner: Bytes
  origin: Bytes!
  amount: BigInt!
  tickLower: BigInt!
  tickUpper: BigInt!
}

input Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  liquidity: BigDecimal
  liquidity_not: BigDecimal
  liquidity_gt: BigDecimal
  liquidity_lt: BigDecimal
  liquidity_gte: BigDecimal
  liquidity_lte: BigDecimal
  liquidity_in: [BigDecimal!]
  liquidity_not_in: [BigDecimal!]
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  amount0: BigDecimal
  amount0_not: BigDecimal
  amount0_gt: BigDecimal
  amount0_lt: BigDecimal
  amount0_gte: BigDecimal
  amount0_lte: BigDecimal
  amount0_in: [BigDecimal!]
  amount0_not_in: [BigDecimal!]
  amount1: BigDecimal
  amount1_not: BigDecimal
  amount1_gt: BigDecimal
  amount1_lt: BigDecimal
  amount1_gte: BigDecimal
  amount1_lte: BigDecimal
  amount1_in: [BigDecimal!]
  amount1_not_in: [BigDecimal!]
  to: Bytes
  to_not: Bytes
  to_gt: Bytes
  to_lt: Bytes
  to_gte: Bytes
  to_lte: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: Bytes
  feeTo_not: Bytes
  feeTo_gt: Bytes
  feeTo_lt: Bytes
  feeTo_gte: Bytes
  feeTo_lte: Bytes
  feeTo_in: [Bytes!]
  feeTo_not_in: [Bytes!]
  feeTo_contains: Bytes
  feeTo_not_contains: Bytes
  feeLiquidity: BigDecimal
  feeLiquidity_not: BigDecimal
  feeLiquidity_gt: BigDecimal
  feeLiquidity_lt: BigDecimal
  feeLiquidity_gte: BigDecimal
  feeLiquidity_lte: BigDecimal
  feeLiquidity_in: [BigDecimal!]
  feeLiquidity_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Burn_filter]
  or: [Burn_filter]
  needsComplete: Boolean
  needsComplete_not: Boolean
  needsComplete_in: [Boolean!]
  needsComplete_not_in: [Boolean!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: Token_filter
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  origin: Bytes
  origin_not: Bytes
  origin_gt: Bytes
  origin_lt: Bytes
  origin_gte: Bytes
  origin_lte: Bytes
  origin_in: [Bytes!]
  origin_not_in: [Bytes!]
  origin_contains: Bytes
  origin_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
}

enum Burn_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  timestamp
  pair
  pair__id
  pair__name
  pair__reserve0
  pair__reserve1
  pair__totalSupply
  pair__reserveETH
  pair__reserveUSD
  pair__trackedReserveETH
  pair__token0Price
  pair__token1Price
  pair__volumeToken0
  pair__volumeToken1
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__txCount
  pair__liquidityProviderCount
  pair__timestamp
  pair__block
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
  pair__createdAtTimestamp
  pair__createdAtBlockNumber
  needsComplete
  transaction__gasLimit
  transaction__gasPrice
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__fee
  pool__communityFee0
  pool__communityFee1
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__untrackedFeesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__feesToken0
  pool__feesToken1
  pool__totalValueLockedMatic
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedMatic
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedMatic
  owner
  origin
  amount
  tickLower
  tickUpper
  pair__reserveBNB
  pair__trackedReserveBNB
}

scalar Bytes

type DayData {
  id: ID!
  date: Int!
  factory: Factory!
  volumeETH: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolume: BigDecimal!
  liquidityETH: BigDecimal!
  liquidityUSD: BigDecimal!
  txCount: BigInt!
}

input DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  factory_: Factory_filter
  volumeETH: BigDecimal
  volumeETH_not: BigDecimal
  volumeETH_gt: BigDecimal
  volumeETH_lt: BigDecimal
  volumeETH_gte: BigDecimal
  volumeETH_lte: BigDecimal
  volumeETH_in: [BigDecimal!]
  volumeETH_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  untrackedVolume: BigDecimal
  untrackedVolume_not: BigDecimal
  untrackedVolume_gt: BigDecimal
  untrackedVolume_lt: BigDecimal
  untrackedVolume_gte: BigDecimal
  untrackedVolume_lte: BigDecimal
  untrackedVolume_in: [BigDecimal!]
  untrackedVolume_not_in: [BigDecimal!]
  liquidityETH: BigDecimal
  liquidityETH_not: BigDecimal
  liquidityETH_gt: BigDecimal
  liquidityETH_lt: BigDecimal
  liquidityETH_gte: BigDecimal
  liquidityETH_lte: BigDecimal
  liquidityETH_in: [BigDecimal!]
  liquidityETH_not_in: [BigDecimal!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DayData_filter]
  or: [DayData_filter]
}

enum DayData_orderBy {
  id
  date
  factory
  factory__id
  factory__pairCount
  factory__volumeUSD
  factory__volumeETH
  factory__untrackedVolumeUSD
  factory__liquidityUSD
  factory__liquidityETH
  factory__txCount
  factory__tokenCount
  factory__userCount
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: BigDecimal!
  volumeETH: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  liquidityUSD: BigDecimal!
  liquidityETH: BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: Pair_orderBy, orderDirection: OrderDirection, where: Pair_filter): [Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: HourData_orderBy, orderDirection: OrderDirection, where: HourData_filter): [HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: DayData_orderBy, orderDirection: OrderDirection, where: DayData_filter): [DayData!]!
  poolCount: BigInt!
  totalVolumeUSD: BigDecimal!
  totalVolumeMatic: BigDecimal!
  totalFeesUSD: BigDecimal!
  totalFeesMatic: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  totalValueLockedMatic: BigDecimal!
  totalValueLockedUSDUntracked: BigDecimal!
  totalValueLockedMaticUntracked: BigDecimal!
  owner: ID!
}

input Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  volumeETH: BigDecimal
  volumeETH_not: BigDecimal
  volumeETH_gt: BigDecimal
  volumeETH_lt: BigDecimal
  volumeETH_gte: BigDecimal
  volumeETH_lte: BigDecimal
  volumeETH_in: [BigDecimal!]
  volumeETH_not_in: [BigDecimal!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  liquidityETH: BigDecimal
  liquidityETH_not: BigDecimal
  liquidityETH_gt: BigDecimal
  liquidityETH_lt: BigDecimal
  liquidityETH_gte: BigDecimal
  liquidityETH_lte: BigDecimal
  liquidityETH_in: [BigDecimal!]
  liquidityETH_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  pairs_: Pair_filter
  tokens_: Token_filter
  hourData_: HourData_filter
  dayData_: DayData_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Factory_filter]
  or: [Factory_filter]
  poolCount: BigInt
  poolCount_not: BigInt
  poolCount_gt: BigInt
  poolCount_lt: BigInt
  poolCount_gte: BigInt
  poolCount_lte: BigInt
  poolCount_in: [BigInt!]
  poolCount_not_in: [BigInt!]
  totalVolumeUSD: BigDecimal
  totalVolumeUSD_not: BigDecimal
  totalVolumeUSD_gt: BigDecimal
  totalVolumeUSD_lt: BigDecimal
  totalVolumeUSD_gte: BigDecimal
  totalVolumeUSD_lte: BigDecimal
  totalVolumeUSD_in: [BigDecimal!]
  totalVolumeUSD_not_in: [BigDecimal!]
  totalVolumeMatic: BigDecimal
  totalVolumeMatic_not: BigDecimal
  totalVolumeMatic_gt: BigDecimal
  totalVolumeMatic_lt: BigDecimal
  totalVolumeMatic_gte: BigDecimal
  totalVolumeMatic_lte: BigDecimal
  totalVolumeMatic_in: [BigDecimal!]
  totalVolumeMatic_not_in: [BigDecimal!]
  totalFeesUSD: BigDecimal
  totalFeesUSD_not: BigDecimal
  totalFeesUSD_gt: BigDecimal
  totalFeesUSD_lt: BigDecimal
  totalFeesUSD_gte: BigDecimal
  totalFeesUSD_lte: BigDecimal
  totalFeesUSD_in: [BigDecimal!]
  totalFeesUSD_not_in: [BigDecimal!]
  totalFeesMatic: BigDecimal
  totalFeesMatic_not: BigDecimal
  totalFeesMatic_gt: BigDecimal
  totalFeesMatic_lt: BigDecimal
  totalFeesMatic_gte: BigDecimal
  totalFeesMatic_lte: BigDecimal
  totalFeesMatic_in: [BigDecimal!]
  totalFeesMatic_not_in: [BigDecimal!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  totalValueLockedMatic: BigDecimal
  totalValueLockedMatic_not: BigDecimal
  totalValueLockedMatic_gt: BigDecimal
  totalValueLockedMatic_lt: BigDecimal
  totalValueLockedMatic_gte: BigDecimal
  totalValueLockedMatic_lte: BigDecimal
  totalValueLockedMatic_in: [BigDecimal!]
  totalValueLockedMatic_not_in: [BigDecimal!]
  totalValueLockedUSDUntracked: BigDecimal
  totalValueLockedUSDUntracked_not: BigDecimal
  totalValueLockedUSDUntracked_gt: BigDecimal
  totalValueLockedUSDUntracked_lt: BigDecimal
  totalValueLockedUSDUntracked_gte: BigDecimal
  totalValueLockedUSDUntracked_lte: BigDecimal
  totalValueLockedUSDUntracked_in: [BigDecimal!]
  totalValueLockedUSDUntracked_not_in: [BigDecimal!]
  totalValueLockedMaticUntracked: BigDecimal
  totalValueLockedMaticUntracked_not: BigDecimal
  totalValueLockedMaticUntracked_gt: BigDecimal
  totalValueLockedMaticUntracked_lt: BigDecimal
  totalValueLockedMaticUntracked_gte: BigDecimal
  totalValueLockedMaticUntracked_lte: BigDecimal
  totalValueLockedMaticUntracked_in: [BigDecimal!]
  totalValueLockedMaticUntracked_not_in: [BigDecimal!]
  owner: ID
  owner_not: ID
  owner_gt: ID
  owner_lt: ID
  owner_gte: ID
  owner_lte: ID
  owner_in: [ID!]
  owner_not_in: [ID!]
}

enum Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
  poolCount
  totalVolumeUSD
  totalVolumeMatic
  totalFeesUSD
  totalFeesMatic
  totalValueLockedUSD
  totalValueLockedMatic
  totalValueLockedUSDUntracked
  totalValueLockedMaticUntracked
  owner
}

type HourData {
  id: ID!
  date: Int!
  factory: Factory!
  volumeETH: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolume: BigDecimal!
  liquidityETH: BigDecimal!
  liquidityUSD: BigDecimal!
  txCount: BigInt!
}

input HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  factory_: Factory_filter
  volumeETH: BigDecimal
  volumeETH_not: BigDecimal
  volumeETH_gt: BigDecimal
  volumeETH_lt: BigDecimal
  volumeETH_gte: BigDecimal
  volumeETH_lte: BigDecimal
  volumeETH_in: [BigDecimal!]
  volumeETH_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  untrackedVolume: BigDecimal
  untrackedVolume_not: BigDecimal
  untrackedVolume_gt: BigDecimal
  untrackedVolume_lt: BigDecimal
  untrackedVolume_gte: BigDecimal
  untrackedVolume_lte: BigDecimal
  untrackedVolume_in: [BigDecimal!]
  untrackedVolume_not_in: [BigDecimal!]
  liquidityETH: BigDecimal
  liquidityETH_not: BigDecimal
  liquidityETH_gt: BigDecimal
  liquidityETH_lt: BigDecimal
  liquidityETH_gte: BigDecimal
  liquidityETH_lte: BigDecimal
  liquidityETH_in: [BigDecimal!]
  liquidityETH_not_in: [BigDecimal!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [HourData_filter]
  or: [HourData_filter]
}

enum HourData_orderBy {
  id
  date
  factory
  factory__id
  factory__pairCount
  factory__volumeUSD
  factory__volumeETH
  factory__untrackedVolumeUSD
  factory__liquidityUSD
  factory__liquidityETH
  factory__txCount
  factory__tokenCount
  factory__userCount
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

"""
8 bytes signed integer

"""
scalar Int8

type LiquidityPosition {
  id: ID!
  user: User!
  pair: Pair!
  liquidityTokenBalance: BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: LiquidityPositionSnapshot_orderBy, orderDirection: OrderDirection, where: LiquidityPositionSnapshot_filter): [LiquidityPositionSnapshot]!
  block: Int!
  timestamp: Int!
}

type LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: User!
  pair: Pair!
  token0PriceUSD: BigDecimal!
  token1PriceUSD: BigDecimal!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  reserveUSD: BigDecimal!
  liquidityTokenTotalSupply: BigDecimal!
  liquidityTokenBalance: BigDecimal!
}

input LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  liquidityPosition_: LiquidityPosition_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  token0PriceUSD: BigDecimal
  token0PriceUSD_not: BigDecimal
  token0PriceUSD_gt: BigDecimal
  token0PriceUSD_lt: BigDecimal
  token0PriceUSD_gte: BigDecimal
  token0PriceUSD_lte: BigDecimal
  token0PriceUSD_in: [BigDecimal!]
  token0PriceUSD_not_in: [BigDecimal!]
  token1PriceUSD: BigDecimal
  token1PriceUSD_not: BigDecimal
  token1PriceUSD_gt: BigDecimal
  token1PriceUSD_lt: BigDecimal
  token1PriceUSD_gte: BigDecimal
  token1PriceUSD_lte: BigDecimal
  token1PriceUSD_in: [BigDecimal!]
  token1PriceUSD_not_in: [BigDecimal!]
  reserve0: BigDecimal
  reserve0_not: BigDecimal
  reserve0_gt: BigDecimal
  reserve0_lt: BigDecimal
  reserve0_gte: BigDecimal
  reserve0_lte: BigDecimal
  reserve0_in: [BigDecimal!]
  reserve0_not_in: [BigDecimal!]
  reserve1: BigDecimal
  reserve1_not: BigDecimal
  reserve1_gt: BigDecimal
  reserve1_lt: BigDecimal
  reserve1_gte: BigDecimal
  reserve1_lte: BigDecimal
  reserve1_in: [BigDecimal!]
  reserve1_not_in: [BigDecimal!]
  reserveUSD: BigDecimal
  reserveUSD_not: BigDecimal
  reserveUSD_gt: BigDecimal
  reserveUSD_lt: BigDecimal
  reserveUSD_gte: BigDecimal
  reserveUSD_lte: BigDecimal
  reserveUSD_in: [BigDecimal!]
  reserveUSD_not_in: [BigDecimal!]
  liquidityTokenTotalSupply: BigDecimal
  liquidityTokenTotalSupply_not: BigDecimal
  liquidityTokenTotalSupply_gt: BigDecimal
  liquidityTokenTotalSupply_lt: BigDecimal
  liquidityTokenTotalSupply_gte: BigDecimal
  liquidityTokenTotalSupply_lte: BigDecimal
  liquidityTokenTotalSupply_in: [BigDecimal!]
  liquidityTokenTotalSupply_not_in: [BigDecimal!]
  liquidityTokenBalance: BigDecimal
  liquidityTokenBalance_not: BigDecimal
  liquidityTokenBalance_gt: BigDecimal
  liquidityTokenBalance_lt: BigDecimal
  liquidityTokenBalance_gte: BigDecimal
  liquidityTokenBalance_lte: BigDecimal
  liquidityTokenBalance_in: [BigDecimal!]
  liquidityTokenBalance_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiquidityPositionSnapshot_filter]
  or: [LiquidityPositionSnapshot_filter]
}

enum LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  liquidityPosition__id
  liquidityPosition__liquidityTokenBalance
  liquidityPosition__block
  liquidityPosition__timestamp
  timestamp
  block
  user
  user__id
  pair
  pair__id
  pair__name
  pair__reserve0
  pair__reserve1
  pair__totalSupply
  pair__reserveETH
  pair__reserveUSD
  pair__trackedReserveETH
  pair__token0Price
  pair__token1Price
  pair__volumeToken0
  pair__volumeToken1
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__txCount
  pair__liquidityProviderCount
  pair__timestamp
  pair__block
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
  user__usdSwapped
  pair__createdAtTimestamp
  pair__createdAtBlockNumber
  pair__reserveBNB
  pair__trackedReserveBNB
}

input LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  liquidityTokenBalance: BigDecimal
  liquidityTokenBalance_not: BigDecimal
  liquidityTokenBalance_gt: BigDecimal
  liquidityTokenBalance_lt: BigDecimal
  liquidityTokenBalance_gte: BigDecimal
  liquidityTokenBalance_lte: BigDecimal
  liquidityTokenBalance_in: [BigDecimal!]
  liquidityTokenBalance_not_in: [BigDecimal!]
  snapshots_: LiquidityPositionSnapshot_filter
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiquidityPosition_filter]
  or: [LiquidityPosition_filter]
}

enum LiquidityPosition_orderBy {
  id
  user
  user__id
  pair
  pair__id
  pair__name
  pair__reserve0
  pair__reserve1
  pair__totalSupply
  pair__reserveETH
  pair__reserveUSD
  pair__trackedReserveETH
  pair__token0Price
  pair__token1Price
  pair__volumeToken0
  pair__volumeToken1
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__txCount
  pair__liquidityProviderCount
  pair__timestamp
  pair__block
  liquidityTokenBalance
  snapshots
  block
  timestamp
  user__usdSwapped
  pair__createdAtTimestamp
  pair__createdAtBlockNumber
  pair__reserveBNB
  pair__trackedReserveBNB
}

type Mint {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  pair: Pair!
  to: Bytes!
  liquidity: BigDecimal!
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  logIndex: BigInt
  amountUSD: BigDecimal
  feeTo: Bytes
  feeLiquidity: BigDecimal
  pool: Pool!
  token0: Token!
  token1: Token!
  owner: Bytes!
  origin: Bytes!
  amount: BigInt!
  tickLower: BigInt!
  tickUpper: BigInt!
}

input Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  to: Bytes
  to_not: Bytes
  to_gt: Bytes
  to_lt: Bytes
  to_gte: Bytes
  to_lte: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  liquidity: BigDecimal
  liquidity_not: BigDecimal
  liquidity_gt: BigDecimal
  liquidity_lt: BigDecimal
  liquidity_gte: BigDecimal
  liquidity_lte: BigDecimal
  liquidity_in: [BigDecimal!]
  liquidity_not_in: [BigDecimal!]
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  amount0: BigDecimal
  amount0_not: BigDecimal
  amount0_gt: BigDecimal
  amount0_lt: BigDecimal
  amount0_gte: BigDecimal
  amount0_lte: BigDecimal
  amount0_in: [BigDecimal!]
  amount0_not_in: [BigDecimal!]
  amount1: BigDecimal
  amount1_not: BigDecimal
  amount1_gt: BigDecimal
  amount1_lt: BigDecimal
  amount1_gte: BigDecimal
  amount1_lte: BigDecimal
  amount1_in: [BigDecimal!]
  amount1_not_in: [BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  feeTo: Bytes
  feeTo_not: Bytes
  feeTo_gt: Bytes
  feeTo_lt: Bytes
  feeTo_gte: Bytes
  feeTo_lte: Bytes
  feeTo_in: [Bytes!]
  feeTo_not_in: [Bytes!]
  feeTo_contains: Bytes
  feeTo_not_contains: Bytes
  feeLiquidity: BigDecimal
  feeLiquidity_not: BigDecimal
  feeLiquidity_gt: BigDecimal
  feeLiquidity_lt: BigDecimal
  feeLiquidity_gte: BigDecimal
  feeLiquidity_lte: BigDecimal
  feeLiquidity_in: [BigDecimal!]
  feeLiquidity_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Mint_filter]
  or: [Mint_filter]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: Token_filter
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  origin: Bytes
  origin_not: Bytes
  origin_gt: Bytes
  origin_lt: Bytes
  origin_gte: Bytes
  origin_lte: Bytes
  origin_in: [Bytes!]
  origin_not_in: [Bytes!]
  origin_contains: Bytes
  origin_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
}

enum Mint_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  timestamp
  pair
  pair__id
  pair__name
  pair__reserve0
  pair__reserve1
  pair__totalSupply
  pair__reserveETH
  pair__reserveUSD
  pair__trackedReserveETH
  pair__token0Price
  pair__token1Price
  pair__volumeToken0
  pair__volumeToken1
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__txCount
  pair__liquidityProviderCount
  pair__timestamp
  pair__block
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
  pair__createdAtTimestamp
  pair__createdAtBlockNumber
  transaction__gasLimit
  transaction__gasPrice
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__fee
  pool__communityFee0
  pool__communityFee1
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__untrackedFeesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__feesToken0
  pool__feesToken1
  pool__totalValueLockedMatic
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedMatic
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedMatic
  owner
  origin
  amount
  tickLower
  tickUpper
  pair__reserveBNB
  pair__trackedReserveBNB
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Pair {
  id: ID!
  factory: Factory!
  name: String!
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!
  reserveETH: BigDecimal!
  reserveUSD: BigDecimal!
  trackedReserveETH: BigDecimal!
  token0Price: BigDecimal!
  token1Price: BigDecimal!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: LiquidityPosition_orderBy, orderDirection: OrderDirection, where: LiquidityPosition_filter): [LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: LiquidityPositionSnapshot_orderBy, orderDirection: OrderDirection, where: LiquidityPositionSnapshot_filter): [LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: PairDayData_orderBy, orderDirection: OrderDirection, where: PairDayData_filter): [PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: PairHourData_orderBy, orderDirection: OrderDirection, where: PairHourData_filter): [PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: Mint_orderBy, orderDirection: OrderDirection, where: Mint_filter): [Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: Burn_orderBy, orderDirection: OrderDirection, where: Burn_filter): [Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, where: Swap_filter): [Swap!]!
  timestamp: BigInt!
  block: BigInt!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  pairHourData(skip: Int = 0, first: Int = 100, orderBy: PairHourData_orderBy, orderDirection: OrderDirection, where: PairHourData_filter): [PairHourData!]!
  reserveBNB: BigDecimal!
  trackedReserveBNB: BigDecimal!
}

type PairDayData {
  id: ID!
  date: Int!
  pair: Pair!
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!
  reserveUSD: BigDecimal!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  txCount: BigInt!
  pairAddress: Bytes!
  dailyVolumeToken0: BigDecimal!
  dailyVolumeToken1: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!
}

input PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: Token_filter
  reserve0: BigDecimal
  reserve0_not: BigDecimal
  reserve0_gt: BigDecimal
  reserve0_lt: BigDecimal
  reserve0_gte: BigDecimal
  reserve0_lte: BigDecimal
  reserve0_in: [BigDecimal!]
  reserve0_not_in: [BigDecimal!]
  reserve1: BigDecimal
  reserve1_not: BigDecimal
  reserve1_gt: BigDecimal
  reserve1_lt: BigDecimal
  reserve1_gte: BigDecimal
  reserve1_lte: BigDecimal
  reserve1_in: [BigDecimal!]
  reserve1_not_in: [BigDecimal!]
  totalSupply: BigDecimal
  totalSupply_not: BigDecimal
  totalSupply_gt: BigDecimal
  totalSupply_lt: BigDecimal
  totalSupply_gte: BigDecimal
  totalSupply_lte: BigDecimal
  totalSupply_in: [BigDecimal!]
  totalSupply_not_in: [BigDecimal!]
  reserveUSD: BigDecimal
  reserveUSD_not: BigDecimal
  reserveUSD_gt: BigDecimal
  reserveUSD_lt: BigDecimal
  reserveUSD_gte: BigDecimal
  reserveUSD_lte: BigDecimal
  reserveUSD_in: [BigDecimal!]
  reserveUSD_not_in: [BigDecimal!]
  volumeToken0: BigDecimal
  volumeToken0_not: BigDecimal
  volumeToken0_gt: BigDecimal
  volumeToken0_lt: BigDecimal
  volumeToken0_gte: BigDecimal
  volumeToken0_lte: BigDecimal
  volumeToken0_in: [BigDecimal!]
  volumeToken0_not_in: [BigDecimal!]
  volumeToken1: BigDecimal
  volumeToken1_not: BigDecimal
  volumeToken1_gt: BigDecimal
  volumeToken1_lt: BigDecimal
  volumeToken1_gte: BigDecimal
  volumeToken1_lte: BigDecimal
  volumeToken1_in: [BigDecimal!]
  volumeToken1_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PairDayData_filter]
  or: [PairDayData_filter]
  pairAddress: Bytes
  pairAddress_not: Bytes
  pairAddress_gt: Bytes
  pairAddress_lt: Bytes
  pairAddress_gte: Bytes
  pairAddress_lte: Bytes
  pairAddress_in: [Bytes!]
  pairAddress_not_in: [Bytes!]
  pairAddress_contains: Bytes
  pairAddress_not_contains: Bytes
  dailyVolumeToken0: BigDecimal
  dailyVolumeToken0_not: BigDecimal
  dailyVolumeToken0_gt: BigDecimal
  dailyVolumeToken0_lt: BigDecimal
  dailyVolumeToken0_gte: BigDecimal
  dailyVolumeToken0_lte: BigDecimal
  dailyVolumeToken0_in: [BigDecimal!]
  dailyVolumeToken0_not_in: [BigDecimal!]
  dailyVolumeToken1: BigDecimal
  dailyVolumeToken1_not: BigDecimal
  dailyVolumeToken1_gt: BigDecimal
  dailyVolumeToken1_lt: BigDecimal
  dailyVolumeToken1_gte: BigDecimal
  dailyVolumeToken1_lte: BigDecimal
  dailyVolumeToken1_in: [BigDecimal!]
  dailyVolumeToken1_not_in: [BigDecimal!]
  dailyVolumeUSD: BigDecimal
  dailyVolumeUSD_not: BigDecimal
  dailyVolumeUSD_gt: BigDecimal
  dailyVolumeUSD_lt: BigDecimal
  dailyVolumeUSD_gte: BigDecimal
  dailyVolumeUSD_lte: BigDecimal
  dailyVolumeUSD_in: [BigDecimal!]
  dailyVolumeUSD_not_in: [BigDecimal!]
  dailyTxns: BigInt
  dailyTxns_not: BigInt
  dailyTxns_gt: BigInt
  dailyTxns_lt: BigInt
  dailyTxns_gte: BigInt
  dailyTxns_lte: BigInt
  dailyTxns_in: [BigInt!]
  dailyTxns_not_in: [BigInt!]
}

enum PairDayData_orderBy {
  id
  date
  pair
  pair__id
  pair__name
  pair__reserve0
  pair__reserve1
  pair__totalSupply
  pair__reserveETH
  pair__reserveUSD
  pair__trackedReserveETH
  pair__token0Price
  pair__token1Price
  pair__volumeToken0
  pair__volumeToken1
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__txCount
  pair__liquidityProviderCount
  pair__timestamp
  pair__block
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__txCount
  token0__liquidity
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__txCount
  token1__liquidity
  token1__derivedETH
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
  pairAddress
  token0__tradeVolume
  token0__tradeVolumeUSD
  token0__totalLiquidity
  token1__tradeVolume
  token1__tradeVolumeUSD
  token1__totalLiquidity
  dailyVolumeToken0
  dailyVolumeToken1
  dailyVolumeUSD
  dailyTxns
  token0__derivedBNB
  token1__derivedBNB
}

type PairHourData {
  id: ID!
  date: Int!
  pair: Pair!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  reserveUSD: BigDecimal!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  txCount: BigInt!
  hourStartUnix: Int!
  totalSupply: BigDecimal!
  hourlyVolumeToken0: BigDecimal!
  hourlyVolumeToken1: BigDecimal!
  hourlyVolumeUSD: BigDecimal!
  hourlyTxns: BigInt!
}

input PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  reserve0: BigDecimal
  reserve0_not: BigDecimal
  reserve0_gt: BigDecimal
  reserve0_lt: BigDecimal
  reserve0_gte: BigDecimal
  reserve0_lte: BigDecimal
  reserve0_in: [BigDecimal!]
  reserve0_not_in: [BigDecimal!]
  reserve1: BigDecimal
  reserve1_not: BigDecimal
  reserve1_gt: BigDecimal
  reserve1_lt: BigDecimal
  reserve1_gte: BigDecimal
  reserve1_lte: BigDecimal
  reserve1_in: [BigDecimal!]
  reserve1_not_in: [BigDecimal!]
  reserveUSD: BigDecimal
  reserveUSD_not: BigDecimal
  reserveUSD_gt: BigDecimal
  reserveUSD_lt: BigDecimal
  reserveUSD_gte: BigDecimal
  reserveUSD_lte: BigDecimal
  reserveUSD_in: [BigDecimal!]
  reserveUSD_not_in: [BigDecimal!]
  volumeToken0: BigDecimal
  volumeToken0_not: BigDecimal
  volumeToken0_gt: BigDecimal
  volumeToken0_lt: BigDecimal
  volumeToken0_gte: BigDecimal
  volumeToken0_lte: BigDecimal
  volumeToken0_in: [BigDecimal!]
  volumeToken0_not_in: [BigDecimal!]
  volumeToken1: BigDecimal
  volumeToken1_not: BigDecimal
  volumeToken1_gt: BigDecimal
  volumeToken1_lt: BigDecimal
  volumeToken1_gte: BigDecimal
  volumeToken1_lte: BigDecimal
  volumeToken1_in: [BigDecimal!]
  volumeToken1_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PairHourData_filter]
  or: [PairHourData_filter]
  hourStartUnix: Int
  hourStartUnix_not: Int
  hourStartUnix_gt: Int
  hourStartUnix_lt: Int
  hourStartUnix_gte: Int
  hourStartUnix_lte: Int
  hourStartUnix_in: [Int!]
  hourStartUnix_not_in: [Int!]
  totalSupply: BigDecimal
  totalSupply_not: BigDecimal
  totalSupply_gt: BigDecimal
  totalSupply_lt: BigDecimal
  totalSupply_gte: BigDecimal
  totalSupply_lte: BigDecimal
  totalSupply_in: [BigDecimal!]
  totalSupply_not_in: [BigDecimal!]
  hourlyVolumeToken0: BigDecimal
  hourlyVolumeToken0_not: BigDecimal
  hourlyVolumeToken0_gt: BigDecimal
  hourlyVolumeToken0_lt: BigDecimal
  hourlyVolumeToken0_gte: BigDecimal
  hourlyVolumeToken0_lte: BigDecimal
  hourlyVolumeToken0_in: [BigDecimal!]
  hourlyVolumeToken0_not_in: [BigDecimal!]
  hourlyVolumeToken1: BigDecimal
  hourlyVolumeToken1_not: BigDecimal
  hourlyVolumeToken1_gt: BigDecimal
  hourlyVolumeToken1_lt: BigDecimal
  hourlyVolumeToken1_gte: BigDecimal
  hourlyVolumeToken1_lte: BigDecimal
  hourlyVolumeToken1_in: [BigDecimal!]
  hourlyVolumeToken1_not_in: [BigDecimal!]
  hourlyVolumeUSD: BigDecimal
  hourlyVolumeUSD_not: BigDecimal
  hourlyVolumeUSD_gt: BigDecimal
  hourlyVolumeUSD_lt: BigDecimal
  hourlyVolumeUSD_gte: BigDecimal
  hourlyVolumeUSD_lte: BigDecimal
  hourlyVolumeUSD_in: [BigDecimal!]
  hourlyVolumeUSD_not_in: [BigDecimal!]
  hourlyTxns: BigInt
  hourlyTxns_not: BigInt
  hourlyTxns_gt: BigInt
  hourlyTxns_lt: BigInt
  hourlyTxns_gte: BigInt
  hourlyTxns_lte: BigInt
  hourlyTxns_in: [BigInt!]
  hourlyTxns_not_in: [BigInt!]
}

enum PairHourData_orderBy {
  id
  date
  pair
  pair__id
  pair__name
  pair__reserve0
  pair__reserve1
  pair__totalSupply
  pair__reserveETH
  pair__reserveUSD
  pair__trackedReserveETH
  pair__token0Price
  pair__token1Price
  pair__volumeToken0
  pair__volumeToken1
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__txCount
  pair__liquidityProviderCount
  pair__timestamp
  pair__block
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
  hourStartUnix
  pair__createdAtTimestamp
  pair__createdAtBlockNumber
  totalSupply
  hourlyVolumeToken0
  hourlyVolumeToken1
  hourlyVolumeUSD
  hourlyTxns
  pair__reserveBNB
  pair__trackedReserveBNB
}

input Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  factory_: Factory_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: Token_filter
  reserve0: BigDecimal
  reserve0_not: BigDecimal
  reserve0_gt: BigDecimal
  reserve0_lt: BigDecimal
  reserve0_gte: BigDecimal
  reserve0_lte: BigDecimal
  reserve0_in: [BigDecimal!]
  reserve0_not_in: [BigDecimal!]
  reserve1: BigDecimal
  reserve1_not: BigDecimal
  reserve1_gt: BigDecimal
  reserve1_lt: BigDecimal
  reserve1_gte: BigDecimal
  reserve1_lte: BigDecimal
  reserve1_in: [BigDecimal!]
  reserve1_not_in: [BigDecimal!]
  totalSupply: BigDecimal
  totalSupply_not: BigDecimal
  totalSupply_gt: BigDecimal
  totalSupply_lt: BigDecimal
  totalSupply_gte: BigDecimal
  totalSupply_lte: BigDecimal
  totalSupply_in: [BigDecimal!]
  totalSupply_not_in: [BigDecimal!]
  reserveETH: BigDecimal
  reserveETH_not: BigDecimal
  reserveETH_gt: BigDecimal
  reserveETH_lt: BigDecimal
  reserveETH_gte: BigDecimal
  reserveETH_lte: BigDecimal
  reserveETH_in: [BigDecimal!]
  reserveETH_not_in: [BigDecimal!]
  reserveUSD: BigDecimal
  reserveUSD_not: BigDecimal
  reserveUSD_gt: BigDecimal
  reserveUSD_lt: BigDecimal
  reserveUSD_gte: BigDecimal
  reserveUSD_lte: BigDecimal
  reserveUSD_in: [BigDecimal!]
  reserveUSD_not_in: [BigDecimal!]
  trackedReserveETH: BigDecimal
  trackedReserveETH_not: BigDecimal
  trackedReserveETH_gt: BigDecimal
  trackedReserveETH_lt: BigDecimal
  trackedReserveETH_gte: BigDecimal
  trackedReserveETH_lte: BigDecimal
  trackedReserveETH_in: [BigDecimal!]
  trackedReserveETH_not_in: [BigDecimal!]
  token0Price: BigDecimal
  token0Price_not: BigDecimal
  token0Price_gt: BigDecimal
  token0Price_lt: BigDecimal
  token0Price_gte: BigDecimal
  token0Price_lte: BigDecimal
  token0Price_in: [BigDecimal!]
  token0Price_not_in: [BigDecimal!]
  token1Price: BigDecimal
  token1Price_not: BigDecimal
  token1Price_gt: BigDecimal
  token1Price_lt: BigDecimal
  token1Price_gte: BigDecimal
  token1Price_lte: BigDecimal
  token1Price_in: [BigDecimal!]
  token1Price_not_in: [BigDecimal!]
  volumeToken0: BigDecimal
  volumeToken0_not: BigDecimal
  volumeToken0_gt: BigDecimal
  volumeToken0_lt: BigDecimal
  volumeToken0_gte: BigDecimal
  volumeToken0_lte: BigDecimal
  volumeToken0_in: [BigDecimal!]
  volumeToken0_not_in: [BigDecimal!]
  volumeToken1: BigDecimal
  volumeToken1_not: BigDecimal
  volumeToken1_gt: BigDecimal
  volumeToken1_lt: BigDecimal
  volumeToken1_gte: BigDecimal
  volumeToken1_lte: BigDecimal
  volumeToken1_in: [BigDecimal!]
  volumeToken1_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  liquidityPositions_: LiquidityPosition_filter
  liquidityPositionSnapshots_: LiquidityPositionSnapshot_filter
  dayData_: PairDayData_filter
  hourData_: PairHourData_filter
  mints_: Mint_filter
  burns_: Burn_filter
  swaps_: Swap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Pair_filter]
  or: [Pair_filter]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_not_in: [BigInt!]
  pairHourData_: PairHourData_filter
  reserveBNB: BigDecimal
  reserveBNB_not: BigDecimal
  reserveBNB_gt: BigDecimal
  reserveBNB_lt: BigDecimal
  reserveBNB_gte: BigDecimal
  reserveBNB_lte: BigDecimal
  reserveBNB_in: [BigDecimal!]
  reserveBNB_not_in: [BigDecimal!]
  trackedReserveBNB: BigDecimal
  trackedReserveBNB_not: BigDecimal
  trackedReserveBNB_gt: BigDecimal
  trackedReserveBNB_lt: BigDecimal
  trackedReserveBNB_gte: BigDecimal
  trackedReserveBNB_lte: BigDecimal
  trackedReserveBNB_in: [BigDecimal!]
  trackedReserveBNB_not_in: [BigDecimal!]
}

enum Pair_orderBy {
  id
  factory
  factory__id
  factory__pairCount
  factory__volumeUSD
  factory__volumeETH
  factory__untrackedVolumeUSD
  factory__liquidityUSD
  factory__liquidityETH
  factory__txCount
  factory__tokenCount
  factory__userCount
  name
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__txCount
  token0__liquidity
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__txCount
  token1__liquidity
  token1__derivedETH
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
  token0__tradeVolume
  token0__tradeVolumeUSD
  token0__totalLiquidity
  token1__tradeVolume
  token1__tradeVolumeUSD
  token1__totalLiquidity
  createdAtTimestamp
  createdAtBlockNumber
  pairHourData
  token0__derivedBNB
  token1__derivedBNB
  reserveBNB
  trackedReserveBNB
}

type Swap {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  pair: Pair!
  sender: Bytes!
  amount0In: BigDecimal!
  amount1In: BigDecimal!
  amount0Out: BigDecimal!
  amount1Out: BigDecimal!
  to: Bytes!
  logIndex: BigInt
  amountUSD: BigDecimal!
  from: Bytes!
  pool: Pool!
  token0: Token!
  token1: Token!
  recipient: Bytes!
  liquidity: BigInt!
  origin: Bytes!
  amount0: BigDecimal!
  amount1: BigDecimal!
  price: BigInt!
  tick: BigInt!
}

input Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  amount0In: BigDecimal
  amount0In_not: BigDecimal
  amount0In_gt: BigDecimal
  amount0In_lt: BigDecimal
  amount0In_gte: BigDecimal
  amount0In_lte: BigDecimal
  amount0In_in: [BigDecimal!]
  amount0In_not_in: [BigDecimal!]
  amount1In: BigDecimal
  amount1In_not: BigDecimal
  amount1In_gt: BigDecimal
  amount1In_lt: BigDecimal
  amount1In_gte: BigDecimal
  amount1In_lte: BigDecimal
  amount1In_in: [BigDecimal!]
  amount1In_not_in: [BigDecimal!]
  amount0Out: BigDecimal
  amount0Out_not: BigDecimal
  amount0Out_gt: BigDecimal
  amount0Out_lt: BigDecimal
  amount0Out_gte: BigDecimal
  amount0Out_lte: BigDecimal
  amount0Out_in: [BigDecimal!]
  amount0Out_not_in: [BigDecimal!]
  amount1Out: BigDecimal
  amount1Out_not: BigDecimal
  amount1Out_gt: BigDecimal
  amount1Out_lt: BigDecimal
  amount1Out_gte: BigDecimal
  amount1Out_lte: BigDecimal
  amount1Out_in: [BigDecimal!]
  amount1Out_not_in: [BigDecimal!]
  to: Bytes
  to_not: Bytes
  to_gt: Bytes
  to_lt: Bytes
  to_gte: Bytes
  to_lte: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Swap_filter]
  or: [Swap_filter]
  from: Bytes
  from_not: Bytes
  from_gt: Bytes
  from_lt: Bytes
  from_gte: Bytes
  from_lte: Bytes
  from_in: [Bytes!]
  from_not_in: [Bytes!]
  from_contains: Bytes
  from_not_contains: Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: Token_filter
  recipient: Bytes
  recipient_not: Bytes
  recipient_gt: Bytes
  recipient_lt: Bytes
  recipient_gte: Bytes
  recipient_lte: Bytes
  recipient_in: [Bytes!]
  recipient_not_in: [Bytes!]
  recipient_contains: Bytes
  recipient_not_contains: Bytes
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  origin: Bytes
  origin_not: Bytes
  origin_gt: Bytes
  origin_lt: Bytes
  origin_gte: Bytes
  origin_lte: Bytes
  origin_in: [Bytes!]
  origin_not_in: [Bytes!]
  origin_contains: Bytes
  origin_not_contains: Bytes
  amount0: BigDecimal
  amount0_not: BigDecimal
  amount0_gt: BigDecimal
  amount0_lt: BigDecimal
  amount0_gte: BigDecimal
  amount0_lte: BigDecimal
  amount0_in: [BigDecimal!]
  amount0_not_in: [BigDecimal!]
  amount1: BigDecimal
  amount1_not: BigDecimal
  amount1_gt: BigDecimal
  amount1_lt: BigDecimal
  amount1_gte: BigDecimal
  amount1_lte: BigDecimal
  amount1_in: [BigDecimal!]
  amount1_not_in: [BigDecimal!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
}

enum Swap_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  timestamp
  pair
  pair__id
  pair__name
  pair__reserve0
  pair__reserve1
  pair__totalSupply
  pair__reserveETH
  pair__reserveUSD
  pair__trackedReserveETH
  pair__token0Price
  pair__token1Price
  pair__volumeToken0
  pair__volumeToken1
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__txCount
  pair__liquidityProviderCount
  pair__timestamp
  pair__block
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
  pair__createdAtTimestamp
  pair__createdAtBlockNumber
  from
  transaction__gasLimit
  transaction__gasPrice
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__fee
  pool__communityFee0
  pool__communityFee1
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__untrackedFeesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__feesToken0
  pool__feesToken1
  pool__totalValueLockedMatic
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedMatic
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedMatic
  recipient
  liquidity
  origin
  amount0
  amount1
  price
  tick
  pair__reserveBNB
  pair__trackedReserveBNB
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type Token {
  id: ID!
  factory: Factory!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!
  liquidity: BigDecimal!
  derivedETH: BigDecimal!
  whitelistPairs(skip: Int = 0, first: Int = 100, orderBy: Pair_orderBy, orderDirection: OrderDirection, where: Pair_filter): [Pair!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: TokenHourData_orderBy, orderDirection: OrderDirection, where: TokenHourData_filter): [TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: TokenDayData_orderBy, orderDirection: OrderDirection, where: TokenDayData_filter): [TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: Pair_orderBy, orderDirection: OrderDirection, where: Pair_filter): [Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: Pair_orderBy, orderDirection: OrderDirection, where: Pair_filter): [Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: PairDayData_orderBy, orderDirection: OrderDirection, where: PairDayData_filter): [PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: PairDayData_orderBy, orderDirection: OrderDirection, where: PairDayData_filter): [PairDayData!]!
  tradeVolume: BigDecimal!
  tradeVolumeUSD: BigDecimal!
  totalLiquidity: BigDecimal!
  tokenDayData(skip: Int = 0, first: Int = 100, orderBy: TokenDayData_orderBy, orderDirection: OrderDirection, where: TokenDayData_filter): [TokenDayData!]!
  pairDayDataBase(skip: Int = 0, first: Int = 100, orderBy: PairDayData_orderBy, orderDirection: OrderDirection, where: PairDayData_filter): [PairDayData!]!
  pairDayDataQuote(skip: Int = 0, first: Int = 100, orderBy: PairDayData_orderBy, orderDirection: OrderDirection, where: PairDayData_filter): [PairDayData!]!
  pairBase(skip: Int = 0, first: Int = 100, orderBy: Pair_orderBy, orderDirection: OrderDirection, where: Pair_filter): [Pair!]!
  pairQuote(skip: Int = 0, first: Int = 100, orderBy: Pair_orderBy, orderDirection: OrderDirection, where: Pair_filter): [Pair!]!
  feesUSD: BigDecimal!
  poolCount: BigInt!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  totalValueLockedUSDUntracked: BigDecimal!
  derivedMatic: BigDecimal!
  whitelistPools(skip: Int = 0, first: Int = 100, orderBy: Pool_orderBy, orderDirection: OrderDirection, where: Pool_filter): [Pool!]!
  derivedBNB: BigDecimal
}

type TokenDayData {
  id: ID!
  date: Int!
  token: Token!
  volume: BigDecimal!
  volumeETH: BigDecimal!
  volumeUSD: BigDecimal!
  txCount: BigInt!
  liquidity: BigDecimal!
  liquidityETH: BigDecimal!
  liquidityUSD: BigDecimal!
  priceUSD: BigDecimal!
  dailyVolumeToken: BigDecimal!
  dailyVolumeETH: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!
  totalLiquidityToken: BigDecimal!
  totalLiquidityETH: BigDecimal!
  totalLiquidityUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  feesUSD: BigDecimal!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
}

input TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  volume: BigDecimal
  volume_not: BigDecimal
  volume_gt: BigDecimal
  volume_lt: BigDecimal
  volume_gte: BigDecimal
  volume_lte: BigDecimal
  volume_in: [BigDecimal!]
  volume_not_in: [BigDecimal!]
  volumeETH: BigDecimal
  volumeETH_not: BigDecimal
  volumeETH_gt: BigDecimal
  volumeETH_lt: BigDecimal
  volumeETH_gte: BigDecimal
  volumeETH_lte: BigDecimal
  volumeETH_in: [BigDecimal!]
  volumeETH_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: BigDecimal
  liquidity_not: BigDecimal
  liquidity_gt: BigDecimal
  liquidity_lt: BigDecimal
  liquidity_gte: BigDecimal
  liquidity_lte: BigDecimal
  liquidity_in: [BigDecimal!]
  liquidity_not_in: [BigDecimal!]
  liquidityETH: BigDecimal
  liquidityETH_not: BigDecimal
  liquidityETH_gt: BigDecimal
  liquidityETH_lt: BigDecimal
  liquidityETH_gte: BigDecimal
  liquidityETH_lte: BigDecimal
  liquidityETH_in: [BigDecimal!]
  liquidityETH_not_in: [BigDecimal!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  priceUSD: BigDecimal
  priceUSD_not: BigDecimal
  priceUSD_gt: BigDecimal
  priceUSD_lt: BigDecimal
  priceUSD_gte: BigDecimal
  priceUSD_lte: BigDecimal
  priceUSD_in: [BigDecimal!]
  priceUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenDayData_filter]
  or: [TokenDayData_filter]
  dailyVolumeToken: BigDecimal
  dailyVolumeToken_not: BigDecimal
  dailyVolumeToken_gt: BigDecimal
  dailyVolumeToken_lt: BigDecimal
  dailyVolumeToken_gte: BigDecimal
  dailyVolumeToken_lte: BigDecimal
  dailyVolumeToken_in: [BigDecimal!]
  dailyVolumeToken_not_in: [BigDecimal!]
  dailyVolumeETH: BigDecimal
  dailyVolumeETH_not: BigDecimal
  dailyVolumeETH_gt: BigDecimal
  dailyVolumeETH_lt: BigDecimal
  dailyVolumeETH_gte: BigDecimal
  dailyVolumeETH_lte: BigDecimal
  dailyVolumeETH_in: [BigDecimal!]
  dailyVolumeETH_not_in: [BigDecimal!]
  dailyVolumeUSD: BigDecimal
  dailyVolumeUSD_not: BigDecimal
  dailyVolumeUSD_gt: BigDecimal
  dailyVolumeUSD_lt: BigDecimal
  dailyVolumeUSD_gte: BigDecimal
  dailyVolumeUSD_lte: BigDecimal
  dailyVolumeUSD_in: [BigDecimal!]
  dailyVolumeUSD_not_in: [BigDecimal!]
  dailyTxns: BigInt
  dailyTxns_not: BigInt
  dailyTxns_gt: BigInt
  dailyTxns_lt: BigInt
  dailyTxns_gte: BigInt
  dailyTxns_lte: BigInt
  dailyTxns_in: [BigInt!]
  dailyTxns_not_in: [BigInt!]
  totalLiquidityToken: BigDecimal
  totalLiquidityToken_not: BigDecimal
  totalLiquidityToken_gt: BigDecimal
  totalLiquidityToken_lt: BigDecimal
  totalLiquidityToken_gte: BigDecimal
  totalLiquidityToken_lte: BigDecimal
  totalLiquidityToken_in: [BigDecimal!]
  totalLiquidityToken_not_in: [BigDecimal!]
  totalLiquidityETH: BigDecimal
  totalLiquidityETH_not: BigDecimal
  totalLiquidityETH_gt: BigDecimal
  totalLiquidityETH_lt: BigDecimal
  totalLiquidityETH_gte: BigDecimal
  totalLiquidityETH_lte: BigDecimal
  totalLiquidityETH_in: [BigDecimal!]
  totalLiquidityETH_not_in: [BigDecimal!]
  totalLiquidityUSD: BigDecimal
  totalLiquidityUSD_not: BigDecimal
  totalLiquidityUSD_gt: BigDecimal
  totalLiquidityUSD_lt: BigDecimal
  totalLiquidityUSD_gte: BigDecimal
  totalLiquidityUSD_lte: BigDecimal
  totalLiquidityUSD_in: [BigDecimal!]
  totalLiquidityUSD_not_in: [BigDecimal!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  totalValueLocked: BigDecimal
  totalValueLocked_not: BigDecimal
  totalValueLocked_gt: BigDecimal
  totalValueLocked_lt: BigDecimal
  totalValueLocked_gte: BigDecimal
  totalValueLocked_lte: BigDecimal
  totalValueLocked_in: [BigDecimal!]
  totalValueLocked_not_in: [BigDecimal!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  open: BigDecimal
  open_not: BigDecimal
  open_gt: BigDecimal
  open_lt: BigDecimal
  open_gte: BigDecimal
  open_lte: BigDecimal
  open_in: [BigDecimal!]
  open_not_in: [BigDecimal!]
  high: BigDecimal
  high_not: BigDecimal
  high_gt: BigDecimal
  high_lt: BigDecimal
  high_gte: BigDecimal
  high_lte: BigDecimal
  high_in: [BigDecimal!]
  high_not_in: [BigDecimal!]
  low: BigDecimal
  low_not: BigDecimal
  low_gt: BigDecimal
  low_lt: BigDecimal
  low_gte: BigDecimal
  low_lte: BigDecimal
  low_in: [BigDecimal!]
  low_not_in: [BigDecimal!]
  close: BigDecimal
  close_not: BigDecimal
  close_gt: BigDecimal
  close_lt: BigDecimal
  close_gte: BigDecimal
  close_lte: BigDecimal
  close_in: [BigDecimal!]
  close_not_in: [BigDecimal!]
}

enum TokenDayData_orderBy {
  id
  date
  token
  token__id
  token__symbol
  token__name
  token__decimals
  token__totalSupply
  token__volume
  token__volumeUSD
  token__untrackedVolumeUSD
  token__txCount
  token__liquidity
  token__derivedETH
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
  token__tradeVolume
  token__tradeVolumeUSD
  token__totalLiquidity
  dailyVolumeToken
  dailyVolumeETH
  dailyVolumeUSD
  dailyTxns
  totalLiquidityToken
  totalLiquidityETH
  totalLiquidityUSD
  token__feesUSD
  token__poolCount
  token__totalValueLocked
  token__totalValueLockedUSD
  token__totalValueLockedUSDUntracked
  token__derivedMatic
  untrackedVolumeUSD
  totalValueLocked
  totalValueLockedUSD
  feesUSD
  open
  high
  low
  close
  token__derivedBNB
}

type TokenHourData {
  id: ID!
  date: Int!
  token: Token!
  volume: BigDecimal!
  volumeETH: BigDecimal!
  volumeUSD: BigDecimal!
  txCount: BigInt!
  liquidity: BigDecimal!
  liquidityETH: BigDecimal!
  liquidityUSD: BigDecimal!
  priceUSD: BigDecimal!
  periodStartUnix: Int!
  untrackedVolumeUSD: BigDecimal!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  feesUSD: BigDecimal!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
}

input TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  volume: BigDecimal
  volume_not: BigDecimal
  volume_gt: BigDecimal
  volume_lt: BigDecimal
  volume_gte: BigDecimal
  volume_lte: BigDecimal
  volume_in: [BigDecimal!]
  volume_not_in: [BigDecimal!]
  volumeETH: BigDecimal
  volumeETH_not: BigDecimal
  volumeETH_gt: BigDecimal
  volumeETH_lt: BigDecimal
  volumeETH_gte: BigDecimal
  volumeETH_lte: BigDecimal
  volumeETH_in: [BigDecimal!]
  volumeETH_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: BigDecimal
  liquidity_not: BigDecimal
  liquidity_gt: BigDecimal
  liquidity_lt: BigDecimal
  liquidity_gte: BigDecimal
  liquidity_lte: BigDecimal
  liquidity_in: [BigDecimal!]
  liquidity_not_in: [BigDecimal!]
  liquidityETH: BigDecimal
  liquidityETH_not: BigDecimal
  liquidityETH_gt: BigDecimal
  liquidityETH_lt: BigDecimal
  liquidityETH_gte: BigDecimal
  liquidityETH_lte: BigDecimal
  liquidityETH_in: [BigDecimal!]
  liquidityETH_not_in: [BigDecimal!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  priceUSD: BigDecimal
  priceUSD_not: BigDecimal
  priceUSD_gt: BigDecimal
  priceUSD_lt: BigDecimal
  priceUSD_gte: BigDecimal
  priceUSD_lte: BigDecimal
  priceUSD_in: [BigDecimal!]
  priceUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenHourData_filter]
  or: [TokenHourData_filter]
  periodStartUnix: Int
  periodStartUnix_not: Int
  periodStartUnix_gt: Int
  periodStartUnix_lt: Int
  periodStartUnix_gte: Int
  periodStartUnix_lte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_not_in: [Int!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  totalValueLocked: BigDecimal
  totalValueLocked_not: BigDecimal
  totalValueLocked_gt: BigDecimal
  totalValueLocked_lt: BigDecimal
  totalValueLocked_gte: BigDecimal
  totalValueLocked_lte: BigDecimal
  totalValueLocked_in: [BigDecimal!]
  totalValueLocked_not_in: [BigDecimal!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  open: BigDecimal
  open_not: BigDecimal
  open_gt: BigDecimal
  open_lt: BigDecimal
  open_gte: BigDecimal
  open_lte: BigDecimal
  open_in: [BigDecimal!]
  open_not_in: [BigDecimal!]
  high: BigDecimal
  high_not: BigDecimal
  high_gt: BigDecimal
  high_lt: BigDecimal
  high_gte: BigDecimal
  high_lte: BigDecimal
  high_in: [BigDecimal!]
  high_not_in: [BigDecimal!]
  low: BigDecimal
  low_not: BigDecimal
  low_gt: BigDecimal
  low_lt: BigDecimal
  low_gte: BigDecimal
  low_lte: BigDecimal
  low_in: [BigDecimal!]
  low_not_in: [BigDecimal!]
  close: BigDecimal
  close_not: BigDecimal
  close_gt: BigDecimal
  close_lt: BigDecimal
  close_gte: BigDecimal
  close_lte: BigDecimal
  close_in: [BigDecimal!]
  close_not_in: [BigDecimal!]
}

enum TokenHourData_orderBy {
  id
  date
  token
  token__id
  token__symbol
  token__name
  token__decimals
  token__totalSupply
  token__volume
  token__volumeUSD
  token__untrackedVolumeUSD
  token__txCount
  token__liquidity
  token__derivedETH
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
  periodStartUnix
  token__feesUSD
  token__poolCount
  token__totalValueLocked
  token__totalValueLockedUSD
  token__totalValueLockedUSDUntracked
  token__derivedMatic
  untrackedVolumeUSD
  totalValueLocked
  totalValueLockedUSD
  feesUSD
  open
  high
  low
  close
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  factory_: Factory_filter
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: BigDecimal
  volume_not: BigDecimal
  volume_gt: BigDecimal
  volume_lt: BigDecimal
  volume_gte: BigDecimal
  volume_lte: BigDecimal
  volume_in: [BigDecimal!]
  volume_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: BigDecimal
  liquidity_not: BigDecimal
  liquidity_gt: BigDecimal
  liquidity_lt: BigDecimal
  liquidity_gte: BigDecimal
  liquidity_lte: BigDecimal
  liquidity_in: [BigDecimal!]
  liquidity_not_in: [BigDecimal!]
  derivedETH: BigDecimal
  derivedETH_not: BigDecimal
  derivedETH_gt: BigDecimal
  derivedETH_lt: BigDecimal
  derivedETH_gte: BigDecimal
  derivedETH_lte: BigDecimal
  derivedETH_in: [BigDecimal!]
  derivedETH_not_in: [BigDecimal!]
  whitelistPairs: [String!]
  whitelistPairs_not: [String!]
  whitelistPairs_contains: [String!]
  whitelistPairs_contains_nocase: [String!]
  whitelistPairs_not_contains: [String!]
  whitelistPairs_not_contains_nocase: [String!]
  whitelistPairs_: Pair_filter
  hourData_: TokenHourData_filter
  dayData_: TokenDayData_filter
  basePairs_: Pair_filter
  quotePairs_: Pair_filter
  basePairsDayData_: PairDayData_filter
  quotePairsDayData_: PairDayData_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
  tradeVolume: BigDecimal
  tradeVolume_not: BigDecimal
  tradeVolume_gt: BigDecimal
  tradeVolume_lt: BigDecimal
  tradeVolume_gte: BigDecimal
  tradeVolume_lte: BigDecimal
  tradeVolume_in: [BigDecimal!]
  tradeVolume_not_in: [BigDecimal!]
  tradeVolumeUSD: BigDecimal
  tradeVolumeUSD_not: BigDecimal
  tradeVolumeUSD_gt: BigDecimal
  tradeVolumeUSD_lt: BigDecimal
  tradeVolumeUSD_gte: BigDecimal
  tradeVolumeUSD_lte: BigDecimal
  tradeVolumeUSD_in: [BigDecimal!]
  tradeVolumeUSD_not_in: [BigDecimal!]
  totalLiquidity: BigDecimal
  totalLiquidity_not: BigDecimal
  totalLiquidity_gt: BigDecimal
  totalLiquidity_lt: BigDecimal
  totalLiquidity_gte: BigDecimal
  totalLiquidity_lte: BigDecimal
  totalLiquidity_in: [BigDecimal!]
  totalLiquidity_not_in: [BigDecimal!]
  tokenDayData_: TokenDayData_filter
  pairDayDataBase_: PairDayData_filter
  pairDayDataQuote_: PairDayData_filter
  pairBase_: Pair_filter
  pairQuote_: Pair_filter
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  poolCount: BigInt
  poolCount_not: BigInt
  poolCount_gt: BigInt
  poolCount_lt: BigInt
  poolCount_gte: BigInt
  poolCount_lte: BigInt
  poolCount_in: [BigInt!]
  poolCount_not_in: [BigInt!]
  totalValueLocked: BigDecimal
  totalValueLocked_not: BigDecimal
  totalValueLocked_gt: BigDecimal
  totalValueLocked_lt: BigDecimal
  totalValueLocked_gte: BigDecimal
  totalValueLocked_lte: BigDecimal
  totalValueLocked_in: [BigDecimal!]
  totalValueLocked_not_in: [BigDecimal!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  totalValueLockedUSDUntracked: BigDecimal
  totalValueLockedUSDUntracked_not: BigDecimal
  totalValueLockedUSDUntracked_gt: BigDecimal
  totalValueLockedUSDUntracked_lt: BigDecimal
  totalValueLockedUSDUntracked_gte: BigDecimal
  totalValueLockedUSDUntracked_lte: BigDecimal
  totalValueLockedUSDUntracked_in: [BigDecimal!]
  totalValueLockedUSDUntracked_not_in: [BigDecimal!]
  derivedMatic: BigDecimal
  derivedMatic_not: BigDecimal
  derivedMatic_gt: BigDecimal
  derivedMatic_lt: BigDecimal
  derivedMatic_gte: BigDecimal
  derivedMatic_lte: BigDecimal
  derivedMatic_in: [BigDecimal!]
  derivedMatic_not_in: [BigDecimal!]
  whitelistPools: [String!]
  whitelistPools_not: [String!]
  whitelistPools_contains: [String!]
  whitelistPools_contains_nocase: [String!]
  whitelistPools_not_contains: [String!]
  whitelistPools_not_contains_nocase: [String!]
  whitelistPools_: Pool_filter
  derivedBNB: BigDecimal
  derivedBNB_not: BigDecimal
  derivedBNB_gt: BigDecimal
  derivedBNB_lt: BigDecimal
  derivedBNB_gte: BigDecimal
  derivedBNB_lte: BigDecimal
  derivedBNB_in: [BigDecimal!]
  derivedBNB_not_in: [BigDecimal!]
}

enum Token_orderBy {
  id
  factory
  factory__id
  factory__pairCount
  factory__volumeUSD
  factory__volumeETH
  factory__untrackedVolumeUSD
  factory__liquidityUSD
  factory__liquidityETH
  factory__txCount
  factory__tokenCount
  factory__userCount
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  whitelistPairs
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
  tradeVolume
  tradeVolumeUSD
  totalLiquidity
  tokenDayData
  pairDayDataBase
  pairDayDataQuote
  pairBase
  pairQuote
  feesUSD
  poolCount
  totalValueLocked
  totalValueLockedUSD
  totalValueLockedUSDUntracked
  derivedMatic
  whitelistPools
  derivedBNB
}

type Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: Mint_orderBy, orderDirection: OrderDirection, where: Mint_filter): [Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: Burn_orderBy, orderDirection: OrderDirection, where: Burn_filter): [Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, where: Swap_filter): [Swap]!
  gasLimit: BigInt!
  gasPrice: BigInt!
  flashed(skip: Int = 0, first: Int = 100, orderBy: Flash_orderBy, orderDirection: OrderDirection, where: Flash_filter): [Flash!]!
  collects(skip: Int = 0, first: Int = 100, orderBy: Collect_orderBy, orderDirection: OrderDirection, where: Collect_filter): [Collect!]!
}

input Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  mints_: Mint_filter
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  burns_: Burn_filter
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]
  swaps_: Swap_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transaction_filter]
  or: [Transaction_filter]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  flashed_: Flash_filter
  collects_: Collect_filter
}

enum Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
  gasLimit
  gasPrice
  flashed
  collects
}

type User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: LiquidityPosition_orderBy, orderDirection: OrderDirection, where: LiquidityPosition_filter): [LiquidityPosition!]!
  usdSwapped: BigDecimal!
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPositions_: LiquidityPosition_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
  usdSwapped: BigDecimal
  usdSwapped_not: BigDecimal
  usdSwapped_gt: BigDecimal
  usdSwapped_lt: BigDecimal
  usdSwapped_gte: BigDecimal
  usdSwapped_lte: BigDecimal
  usdSwapped_in: [BigDecimal!]
  usdSwapped_not_in: [BigDecimal!]
}

enum User_orderBy {
  id
  liquidityPositions
  usdSwapped
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type UniswapDayData {
  id: ID!
  date: Int!
  dailyVolumeETH: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyVolumeUntracked: BigDecimal!
  totalVolumeETH: BigDecimal!
  totalLiquidityETH: BigDecimal!
  totalVolumeUSD: BigDecimal!
  totalLiquidityUSD: BigDecimal!
  txCount: BigInt!
}

input UniswapDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  dailyVolumeETH: BigDecimal
  dailyVolumeETH_not: BigDecimal
  dailyVolumeETH_gt: BigDecimal
  dailyVolumeETH_lt: BigDecimal
  dailyVolumeETH_gte: BigDecimal
  dailyVolumeETH_lte: BigDecimal
  dailyVolumeETH_in: [BigDecimal!]
  dailyVolumeETH_not_in: [BigDecimal!]
  dailyVolumeUSD: BigDecimal
  dailyVolumeUSD_not: BigDecimal
  dailyVolumeUSD_gt: BigDecimal
  dailyVolumeUSD_lt: BigDecimal
  dailyVolumeUSD_gte: BigDecimal
  dailyVolumeUSD_lte: BigDecimal
  dailyVolumeUSD_in: [BigDecimal!]
  dailyVolumeUSD_not_in: [BigDecimal!]
  dailyVolumeUntracked: BigDecimal
  dailyVolumeUntracked_not: BigDecimal
  dailyVolumeUntracked_gt: BigDecimal
  dailyVolumeUntracked_lt: BigDecimal
  dailyVolumeUntracked_gte: BigDecimal
  dailyVolumeUntracked_lte: BigDecimal
  dailyVolumeUntracked_in: [BigDecimal!]
  dailyVolumeUntracked_not_in: [BigDecimal!]
  totalVolumeETH: BigDecimal
  totalVolumeETH_not: BigDecimal
  totalVolumeETH_gt: BigDecimal
  totalVolumeETH_lt: BigDecimal
  totalVolumeETH_gte: BigDecimal
  totalVolumeETH_lte: BigDecimal
  totalVolumeETH_in: [BigDecimal!]
  totalVolumeETH_not_in: [BigDecimal!]
  totalLiquidityETH: BigDecimal
  totalLiquidityETH_not: BigDecimal
  totalLiquidityETH_gt: BigDecimal
  totalLiquidityETH_lt: BigDecimal
  totalLiquidityETH_gte: BigDecimal
  totalLiquidityETH_lte: BigDecimal
  totalLiquidityETH_in: [BigDecimal!]
  totalLiquidityETH_not_in: [BigDecimal!]
  totalVolumeUSD: BigDecimal
  totalVolumeUSD_not: BigDecimal
  totalVolumeUSD_gt: BigDecimal
  totalVolumeUSD_lt: BigDecimal
  totalVolumeUSD_gte: BigDecimal
  totalVolumeUSD_lte: BigDecimal
  totalVolumeUSD_in: [BigDecimal!]
  totalVolumeUSD_not_in: [BigDecimal!]
  totalLiquidityUSD: BigDecimal
  totalLiquidityUSD_not: BigDecimal
  totalLiquidityUSD_gt: BigDecimal
  totalLiquidityUSD_lt: BigDecimal
  totalLiquidityUSD_gte: BigDecimal
  totalLiquidityUSD_lte: BigDecimal
  totalLiquidityUSD_in: [BigDecimal!]
  totalLiquidityUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UniswapDayData_filter]
  or: [UniswapDayData_filter]
}

enum UniswapDayData_orderBy {
  id
  date
  dailyVolumeETH
  dailyVolumeUSD
  dailyVolumeUntracked
  totalVolumeETH
  totalLiquidityETH
  totalVolumeUSD
  totalLiquidityUSD
  txCount
}

type UniswapFactory {
  id: ID!
  pairCount: Int!
  totalVolumeUSD: BigDecimal!
  totalVolumeETH: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  totalLiquidityUSD: BigDecimal!
  totalLiquidityETH: BigDecimal!
  txCount: BigInt!
}

input UniswapFactory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: Int
  pairCount_not: Int
  pairCount_gt: Int
  pairCount_lt: Int
  pairCount_gte: Int
  pairCount_lte: Int
  pairCount_in: [Int!]
  pairCount_not_in: [Int!]
  totalVolumeUSD: BigDecimal
  totalVolumeUSD_not: BigDecimal
  totalVolumeUSD_gt: BigDecimal
  totalVolumeUSD_lt: BigDecimal
  totalVolumeUSD_gte: BigDecimal
  totalVolumeUSD_lte: BigDecimal
  totalVolumeUSD_in: [BigDecimal!]
  totalVolumeUSD_not_in: [BigDecimal!]
  totalVolumeETH: BigDecimal
  totalVolumeETH_not: BigDecimal
  totalVolumeETH_gt: BigDecimal
  totalVolumeETH_lt: BigDecimal
  totalVolumeETH_gte: BigDecimal
  totalVolumeETH_lte: BigDecimal
  totalVolumeETH_in: [BigDecimal!]
  totalVolumeETH_not_in: [BigDecimal!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  totalLiquidityUSD: BigDecimal
  totalLiquidityUSD_not: BigDecimal
  totalLiquidityUSD_gt: BigDecimal
  totalLiquidityUSD_lt: BigDecimal
  totalLiquidityUSD_gte: BigDecimal
  totalLiquidityUSD_lte: BigDecimal
  totalLiquidityUSD_in: [BigDecimal!]
  totalLiquidityUSD_not_in: [BigDecimal!]
  totalLiquidityETH: BigDecimal
  totalLiquidityETH_not: BigDecimal
  totalLiquidityETH_gt: BigDecimal
  totalLiquidityETH_lt: BigDecimal
  totalLiquidityETH_gte: BigDecimal
  totalLiquidityETH_lte: BigDecimal
  totalLiquidityETH_in: [BigDecimal!]
  totalLiquidityETH_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UniswapFactory_filter]
  or: [UniswapFactory_filter]
}

enum UniswapFactory_orderBy {
  id
  pairCount
  totalVolumeUSD
  totalVolumeETH
  untrackedVolumeUSD
  totalLiquidityUSD
  totalLiquidityETH
  txCount
}

type AlgebraDayData {
  id: ID!
  date: Int!
  volumeMatic: BigDecimal!
  volumeUSD: BigDecimal!
  volumeUSDUntracked: BigDecimal!
  feesUSD: BigDecimal!
  txCount: BigInt!
  tvlUSD: BigDecimal!
}

input AlgebraDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  volumeMatic: BigDecimal
  volumeMatic_not: BigDecimal
  volumeMatic_gt: BigDecimal
  volumeMatic_lt: BigDecimal
  volumeMatic_gte: BigDecimal
  volumeMatic_lte: BigDecimal
  volumeMatic_in: [BigDecimal!]
  volumeMatic_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  volumeUSDUntracked: BigDecimal
  volumeUSDUntracked_not: BigDecimal
  volumeUSDUntracked_gt: BigDecimal
  volumeUSDUntracked_lt: BigDecimal
  volumeUSDUntracked_gte: BigDecimal
  volumeUSDUntracked_lte: BigDecimal
  volumeUSDUntracked_in: [BigDecimal!]
  volumeUSDUntracked_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tvlUSD: BigDecimal
  tvlUSD_not: BigDecimal
  tvlUSD_gt: BigDecimal
  tvlUSD_lt: BigDecimal
  tvlUSD_gte: BigDecimal
  tvlUSD_lte: BigDecimal
  tvlUSD_in: [BigDecimal!]
  tvlUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AlgebraDayData_filter]
  or: [AlgebraDayData_filter]
}

enum AlgebraDayData_orderBy {
  id
  date
  volumeMatic
  volumeUSD
  volumeUSDUntracked
  feesUSD
  txCount
  tvlUSD
}

type Collect {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  pool: Pool!
  owner: Bytes
  amount0: BigDecimal!
  amount1: BigDecimal!
  amountUSD: BigDecimal
  tickLower: BigInt!
  tickUpper: BigInt!
  logIndex: BigInt
}

input Collect_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  amount0: BigDecimal
  amount0_not: BigDecimal
  amount0_gt: BigDecimal
  amount0_lt: BigDecimal
  amount0_gte: BigDecimal
  amount0_lte: BigDecimal
  amount0_in: [BigDecimal!]
  amount0_not_in: [BigDecimal!]
  amount1: BigDecimal
  amount1_not: BigDecimal
  amount1_gt: BigDecimal
  amount1_lt: BigDecimal
  amount1_gte: BigDecimal
  amount1_lte: BigDecimal
  amount1_in: [BigDecimal!]
  amount1_not_in: [BigDecimal!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Collect_filter]
  or: [Collect_filter]
}

enum Collect_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasLimit
  transaction__gasPrice
  timestamp
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__fee
  pool__communityFee0
  pool__communityFee1
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__untrackedFeesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__feesToken0
  pool__feesToken1
  pool__totalValueLockedMatic
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  owner
  amount0
  amount1
  amountUSD
  tickLower
  tickUpper
  logIndex
}

type FeeHourData {
  id: ID!
  pool: String!
  fee: BigInt!
  changesCount: BigInt!
  timestamp: BigInt!
  minFee: BigInt!
  maxFee: BigInt!
  startFee: BigInt!
  endFee: BigInt!
}

input FeeHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  changesCount: BigInt
  changesCount_not: BigInt
  changesCount_gt: BigInt
  changesCount_lt: BigInt
  changesCount_gte: BigInt
  changesCount_lte: BigInt
  changesCount_in: [BigInt!]
  changesCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  minFee: BigInt
  minFee_not: BigInt
  minFee_gt: BigInt
  minFee_lt: BigInt
  minFee_gte: BigInt
  minFee_lte: BigInt
  minFee_in: [BigInt!]
  minFee_not_in: [BigInt!]
  maxFee: BigInt
  maxFee_not: BigInt
  maxFee_gt: BigInt
  maxFee_lt: BigInt
  maxFee_gte: BigInt
  maxFee_lte: BigInt
  maxFee_in: [BigInt!]
  maxFee_not_in: [BigInt!]
  startFee: BigInt
  startFee_not: BigInt
  startFee_gt: BigInt
  startFee_lt: BigInt
  startFee_gte: BigInt
  startFee_lte: BigInt
  startFee_in: [BigInt!]
  startFee_not_in: [BigInt!]
  endFee: BigInt
  endFee_not: BigInt
  endFee_gt: BigInt
  endFee_lt: BigInt
  endFee_gte: BigInt
  endFee_lte: BigInt
  endFee_in: [BigInt!]
  endFee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeeHourData_filter]
  or: [FeeHourData_filter]
}

enum FeeHourData_orderBy {
  id
  pool
  fee
  changesCount
  timestamp
  minFee
  maxFee
  startFee
  endFee
}

type Flash {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  pool: Pool!
  sender: Bytes!
  recipient: Bytes!
  amount0: BigDecimal!
  amount1: BigDecimal!
  amountUSD: BigDecimal!
  amount0Paid: BigDecimal!
  amount1Paid: BigDecimal!
  logIndex: BigInt
}

input Flash_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  recipient: Bytes
  recipient_not: Bytes
  recipient_gt: Bytes
  recipient_lt: Bytes
  recipient_gte: Bytes
  recipient_lte: Bytes
  recipient_in: [Bytes!]
  recipient_not_in: [Bytes!]
  recipient_contains: Bytes
  recipient_not_contains: Bytes
  amount0: BigDecimal
  amount0_not: BigDecimal
  amount0_gt: BigDecimal
  amount0_lt: BigDecimal
  amount0_gte: BigDecimal
  amount0_lte: BigDecimal
  amount0_in: [BigDecimal!]
  amount0_not_in: [BigDecimal!]
  amount1: BigDecimal
  amount1_not: BigDecimal
  amount1_gt: BigDecimal
  amount1_lt: BigDecimal
  amount1_gte: BigDecimal
  amount1_lte: BigDecimal
  amount1_in: [BigDecimal!]
  amount1_not_in: [BigDecimal!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  amount0Paid: BigDecimal
  amount0Paid_not: BigDecimal
  amount0Paid_gt: BigDecimal
  amount0Paid_lt: BigDecimal
  amount0Paid_gte: BigDecimal
  amount0Paid_lte: BigDecimal
  amount0Paid_in: [BigDecimal!]
  amount0Paid_not_in: [BigDecimal!]
  amount1Paid: BigDecimal
  amount1Paid_not: BigDecimal
  amount1Paid_gt: BigDecimal
  amount1Paid_lt: BigDecimal
  amount1Paid_gte: BigDecimal
  amount1Paid_lte: BigDecimal
  amount1Paid_in: [BigDecimal!]
  amount1Paid_not_in: [BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Flash_filter]
  or: [Flash_filter]
}

enum Flash_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasLimit
  transaction__gasPrice
  timestamp
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__fee
  pool__communityFee0
  pool__communityFee1
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__untrackedFeesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__feesToken0
  pool__feesToken1
  pool__totalValueLockedMatic
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  sender
  recipient
  amount0
  amount1
  amountUSD
  amount0Paid
  amount1Paid
  logIndex
}

type Pool {
  id: ID!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  token0: Token!
  token1: Token!
  fee: BigInt!
  communityFee0: BigInt!
  communityFee1: BigInt!
  liquidity: BigInt!
  sqrtPrice: BigInt!
  feeGrowthGlobal0X128: BigInt!
  feeGrowthGlobal1X128: BigInt!
  token0Price: BigDecimal!
  token1Price: BigDecimal!
  tick: BigInt!
  observationIndex: BigInt!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  feesUSD: BigDecimal!
  untrackedFeesUSD: BigDecimal!
  txCount: BigInt!
  collectedFeesToken0: BigDecimal!
  collectedFeesToken1: BigDecimal!
  collectedFeesUSD: BigDecimal!
  totalValueLockedToken0: BigDecimal!
  totalValueLockedToken1: BigDecimal!
  feesToken0: BigDecimal!
  feesToken1: BigDecimal!
  totalValueLockedMatic: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  totalValueLockedUSDUntracked: BigDecimal!
  liquidityProviderCount: BigInt!
  poolHourData(skip: Int = 0, first: Int = 100, orderBy: PoolHourData_orderBy, orderDirection: OrderDirection, where: PoolHourData_filter): [PoolHourData!]!
  poolDayData(skip: Int = 0, first: Int = 100, orderBy: PoolDayData_orderBy, orderDirection: OrderDirection, where: PoolDayData_filter): [PoolDayData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: Mint_orderBy, orderDirection: OrderDirection, where: Mint_filter): [Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: Burn_orderBy, orderDirection: OrderDirection, where: Burn_filter): [Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, where: Swap_filter): [Swap!]!
  collects(skip: Int = 0, first: Int = 100, orderBy: Collect_orderBy, orderDirection: OrderDirection, where: Collect_filter): [Collect!]!
  ticks(skip: Int = 0, first: Int = 100, orderBy: Tick_orderBy, orderDirection: OrderDirection, where: Tick_filter): [Tick!]!
}

type PoolDayData {
  id: ID!
  date: Int!
  pool: Pool!
  liquidity: BigInt!
  sqrtPrice: BigInt!
  untrackedVolumeUSD: BigDecimal!
  token0Price: BigDecimal!
  token1Price: BigDecimal!
  tick: BigInt
  feeGrowthGlobal0X128: BigInt!
  feeGrowthGlobal1X128: BigInt!
  tvlUSD: BigDecimal!
  feesToken0: BigDecimal!
  feesToken1: BigDecimal!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  feesUSD: BigDecimal!
  txCount: BigInt!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
}

input PoolDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  sqrtPrice: BigInt
  sqrtPrice_not: BigInt
  sqrtPrice_gt: BigInt
  sqrtPrice_lt: BigInt
  sqrtPrice_gte: BigInt
  sqrtPrice_lte: BigInt
  sqrtPrice_in: [BigInt!]
  sqrtPrice_not_in: [BigInt!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  token0Price: BigDecimal
  token0Price_not: BigDecimal
  token0Price_gt: BigDecimal
  token0Price_lt: BigDecimal
  token0Price_gte: BigDecimal
  token0Price_lte: BigDecimal
  token0Price_in: [BigDecimal!]
  token0Price_not_in: [BigDecimal!]
  token1Price: BigDecimal
  token1Price_not: BigDecimal
  token1Price_gt: BigDecimal
  token1Price_lt: BigDecimal
  token1Price_gte: BigDecimal
  token1Price_lte: BigDecimal
  token1Price_in: [BigDecimal!]
  token1Price_not_in: [BigDecimal!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  feeGrowthGlobal0X128: BigInt
  feeGrowthGlobal0X128_not: BigInt
  feeGrowthGlobal0X128_gt: BigInt
  feeGrowthGlobal0X128_lt: BigInt
  feeGrowthGlobal0X128_gte: BigInt
  feeGrowthGlobal0X128_lte: BigInt
  feeGrowthGlobal0X128_in: [BigInt!]
  feeGrowthGlobal0X128_not_in: [BigInt!]
  feeGrowthGlobal1X128: BigInt
  feeGrowthGlobal1X128_not: BigInt
  feeGrowthGlobal1X128_gt: BigInt
  feeGrowthGlobal1X128_lt: BigInt
  feeGrowthGlobal1X128_gte: BigInt
  feeGrowthGlobal1X128_lte: BigInt
  feeGrowthGlobal1X128_in: [BigInt!]
  feeGrowthGlobal1X128_not_in: [BigInt!]
  tvlUSD: BigDecimal
  tvlUSD_not: BigDecimal
  tvlUSD_gt: BigDecimal
  tvlUSD_lt: BigDecimal
  tvlUSD_gte: BigDecimal
  tvlUSD_lte: BigDecimal
  tvlUSD_in: [BigDecimal!]
  tvlUSD_not_in: [BigDecimal!]
  feesToken0: BigDecimal
  feesToken0_not: BigDecimal
  feesToken0_gt: BigDecimal
  feesToken0_lt: BigDecimal
  feesToken0_gte: BigDecimal
  feesToken0_lte: BigDecimal
  feesToken0_in: [BigDecimal!]
  feesToken0_not_in: [BigDecimal!]
  feesToken1: BigDecimal
  feesToken1_not: BigDecimal
  feesToken1_gt: BigDecimal
  feesToken1_lt: BigDecimal
  feesToken1_gte: BigDecimal
  feesToken1_lte: BigDecimal
  feesToken1_in: [BigDecimal!]
  feesToken1_not_in: [BigDecimal!]
  volumeToken0: BigDecimal
  volumeToken0_not: BigDecimal
  volumeToken0_gt: BigDecimal
  volumeToken0_lt: BigDecimal
  volumeToken0_gte: BigDecimal
  volumeToken0_lte: BigDecimal
  volumeToken0_in: [BigDecimal!]
  volumeToken0_not_in: [BigDecimal!]
  volumeToken1: BigDecimal
  volumeToken1_not: BigDecimal
  volumeToken1_gt: BigDecimal
  volumeToken1_lt: BigDecimal
  volumeToken1_gte: BigDecimal
  volumeToken1_lte: BigDecimal
  volumeToken1_in: [BigDecimal!]
  volumeToken1_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  open: BigDecimal
  open_not: BigDecimal
  open_gt: BigDecimal
  open_lt: BigDecimal
  open_gte: BigDecimal
  open_lte: BigDecimal
  open_in: [BigDecimal!]
  open_not_in: [BigDecimal!]
  high: BigDecimal
  high_not: BigDecimal
  high_gt: BigDecimal
  high_lt: BigDecimal
  high_gte: BigDecimal
  high_lte: BigDecimal
  high_in: [BigDecimal!]
  high_not_in: [BigDecimal!]
  low: BigDecimal
  low_not: BigDecimal
  low_gt: BigDecimal
  low_lt: BigDecimal
  low_gte: BigDecimal
  low_lte: BigDecimal
  low_in: [BigDecimal!]
  low_not_in: [BigDecimal!]
  close: BigDecimal
  close_not: BigDecimal
  close_gt: BigDecimal
  close_lt: BigDecimal
  close_gte: BigDecimal
  close_lte: BigDecimal
  close_in: [BigDecimal!]
  close_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolDayData_filter]
  or: [PoolDayData_filter]
}

enum PoolDayData_orderBy {
  id
  date
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__fee
  pool__communityFee0
  pool__communityFee1
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__untrackedFeesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__feesToken0
  pool__feesToken1
  pool__totalValueLockedMatic
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  liquidity
  sqrtPrice
  untrackedVolumeUSD
  token0Price
  token1Price
  tick
  feeGrowthGlobal0X128
  feeGrowthGlobal1X128
  tvlUSD
  feesToken0
  feesToken1
  volumeToken0
  volumeToken1
  volumeUSD
  feesUSD
  txCount
  open
  high
  low
  close
}

type PoolFeeData {
  id: ID!
  pool: String
  timestamp: BigInt!
  fee: BigInt!
}

input PoolFeeData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolFeeData_filter]
  or: [PoolFeeData_filter]
}

enum PoolFeeData_orderBy {
  id
  pool
  timestamp
  fee
}

type PoolHourData {
  id: ID!
  periodStartUnix: Int!
  pool: Pool!
  liquidity: BigInt!
  sqrtPrice: BigInt!
  token0Price: BigDecimal!
  token1Price: BigDecimal!
  tick: BigInt
  feeGrowthGlobal0X128: BigInt!
  feeGrowthGlobal1X128: BigInt!
  tvlUSD: BigDecimal!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  feesUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
}

input PoolHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  periodStartUnix: Int
  periodStartUnix_not: Int
  periodStartUnix_gt: Int
  periodStartUnix_lt: Int
  periodStartUnix_gte: Int
  periodStartUnix_lte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  sqrtPrice: BigInt
  sqrtPrice_not: BigInt
  sqrtPrice_gt: BigInt
  sqrtPrice_lt: BigInt
  sqrtPrice_gte: BigInt
  sqrtPrice_lte: BigInt
  sqrtPrice_in: [BigInt!]
  sqrtPrice_not_in: [BigInt!]
  token0Price: BigDecimal
  token0Price_not: BigDecimal
  token0Price_gt: BigDecimal
  token0Price_lt: BigDecimal
  token0Price_gte: BigDecimal
  token0Price_lte: BigDecimal
  token0Price_in: [BigDecimal!]
  token0Price_not_in: [BigDecimal!]
  token1Price: BigDecimal
  token1Price_not: BigDecimal
  token1Price_gt: BigDecimal
  token1Price_lt: BigDecimal
  token1Price_gte: BigDecimal
  token1Price_lte: BigDecimal
  token1Price_in: [BigDecimal!]
  token1Price_not_in: [BigDecimal!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  feeGrowthGlobal0X128: BigInt
  feeGrowthGlobal0X128_not: BigInt
  feeGrowthGlobal0X128_gt: BigInt
  feeGrowthGlobal0X128_lt: BigInt
  feeGrowthGlobal0X128_gte: BigInt
  feeGrowthGlobal0X128_lte: BigInt
  feeGrowthGlobal0X128_in: [BigInt!]
  feeGrowthGlobal0X128_not_in: [BigInt!]
  feeGrowthGlobal1X128: BigInt
  feeGrowthGlobal1X128_not: BigInt
  feeGrowthGlobal1X128_gt: BigInt
  feeGrowthGlobal1X128_lt: BigInt
  feeGrowthGlobal1X128_gte: BigInt
  feeGrowthGlobal1X128_lte: BigInt
  feeGrowthGlobal1X128_in: [BigInt!]
  feeGrowthGlobal1X128_not_in: [BigInt!]
  tvlUSD: BigDecimal
  tvlUSD_not: BigDecimal
  tvlUSD_gt: BigDecimal
  tvlUSD_lt: BigDecimal
  tvlUSD_gte: BigDecimal
  tvlUSD_lte: BigDecimal
  tvlUSD_in: [BigDecimal!]
  tvlUSD_not_in: [BigDecimal!]
  volumeToken0: BigDecimal
  volumeToken0_not: BigDecimal
  volumeToken0_gt: BigDecimal
  volumeToken0_lt: BigDecimal
  volumeToken0_gte: BigDecimal
  volumeToken0_lte: BigDecimal
  volumeToken0_in: [BigDecimal!]
  volumeToken0_not_in: [BigDecimal!]
  volumeToken1: BigDecimal
  volumeToken1_not: BigDecimal
  volumeToken1_gt: BigDecimal
  volumeToken1_lt: BigDecimal
  volumeToken1_gte: BigDecimal
  volumeToken1_lte: BigDecimal
  volumeToken1_in: [BigDecimal!]
  volumeToken1_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  open: BigDecimal
  open_not: BigDecimal
  open_gt: BigDecimal
  open_lt: BigDecimal
  open_gte: BigDecimal
  open_lte: BigDecimal
  open_in: [BigDecimal!]
  open_not_in: [BigDecimal!]
  high: BigDecimal
  high_not: BigDecimal
  high_gt: BigDecimal
  high_lt: BigDecimal
  high_gte: BigDecimal
  high_lte: BigDecimal
  high_in: [BigDecimal!]
  high_not_in: [BigDecimal!]
  low: BigDecimal
  low_not: BigDecimal
  low_gt: BigDecimal
  low_lt: BigDecimal
  low_gte: BigDecimal
  low_lte: BigDecimal
  low_in: [BigDecimal!]
  low_not_in: [BigDecimal!]
  close: BigDecimal
  close_not: BigDecimal
  close_gt: BigDecimal
  close_lt: BigDecimal
  close_gte: BigDecimal
  close_lte: BigDecimal
  close_in: [BigDecimal!]
  close_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolHourData_filter]
  or: [PoolHourData_filter]
}

enum PoolHourData_orderBy {
  id
  periodStartUnix
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__fee
  pool__communityFee0
  pool__communityFee1
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__untrackedFeesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__feesToken0
  pool__feesToken1
  pool__totalValueLockedMatic
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  liquidity
  sqrtPrice
  token0Price
  token1Price
  tick
  feeGrowthGlobal0X128
  feeGrowthGlobal1X128
  tvlUSD
  volumeToken0
  volumeToken1
  volumeUSD
  feesUSD
  untrackedVolumeUSD
  txCount
  open
  high
  low
  close
}

input Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_not_in: [BigInt!]
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: Token_filter
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  communityFee0: BigInt
  communityFee0_not: BigInt
  communityFee0_gt: BigInt
  communityFee0_lt: BigInt
  communityFee0_gte: BigInt
  communityFee0_lte: BigInt
  communityFee0_in: [BigInt!]
  communityFee0_not_in: [BigInt!]
  communityFee1: BigInt
  communityFee1_not: BigInt
  communityFee1_gt: BigInt
  communityFee1_lt: BigInt
  communityFee1_gte: BigInt
  communityFee1_lte: BigInt
  communityFee1_in: [BigInt!]
  communityFee1_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  sqrtPrice: BigInt
  sqrtPrice_not: BigInt
  sqrtPrice_gt: BigInt
  sqrtPrice_lt: BigInt
  sqrtPrice_gte: BigInt
  sqrtPrice_lte: BigInt
  sqrtPrice_in: [BigInt!]
  sqrtPrice_not_in: [BigInt!]
  feeGrowthGlobal0X128: BigInt
  feeGrowthGlobal0X128_not: BigInt
  feeGrowthGlobal0X128_gt: BigInt
  feeGrowthGlobal0X128_lt: BigInt
  feeGrowthGlobal0X128_gte: BigInt
  feeGrowthGlobal0X128_lte: BigInt
  feeGrowthGlobal0X128_in: [BigInt!]
  feeGrowthGlobal0X128_not_in: [BigInt!]
  feeGrowthGlobal1X128: BigInt
  feeGrowthGlobal1X128_not: BigInt
  feeGrowthGlobal1X128_gt: BigInt
  feeGrowthGlobal1X128_lt: BigInt
  feeGrowthGlobal1X128_gte: BigInt
  feeGrowthGlobal1X128_lte: BigInt
  feeGrowthGlobal1X128_in: [BigInt!]
  feeGrowthGlobal1X128_not_in: [BigInt!]
  token0Price: BigDecimal
  token0Price_not: BigDecimal
  token0Price_gt: BigDecimal
  token0Price_lt: BigDecimal
  token0Price_gte: BigDecimal
  token0Price_lte: BigDecimal
  token0Price_in: [BigDecimal!]
  token0Price_not_in: [BigDecimal!]
  token1Price: BigDecimal
  token1Price_not: BigDecimal
  token1Price_gt: BigDecimal
  token1Price_lt: BigDecimal
  token1Price_gte: BigDecimal
  token1Price_lte: BigDecimal
  token1Price_in: [BigDecimal!]
  token1Price_not_in: [BigDecimal!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  observationIndex: BigInt
  observationIndex_not: BigInt
  observationIndex_gt: BigInt
  observationIndex_lt: BigInt
  observationIndex_gte: BigInt
  observationIndex_lte: BigInt
  observationIndex_in: [BigInt!]
  observationIndex_not_in: [BigInt!]
  volumeToken0: BigDecimal
  volumeToken0_not: BigDecimal
  volumeToken0_gt: BigDecimal
  volumeToken0_lt: BigDecimal
  volumeToken0_gte: BigDecimal
  volumeToken0_lte: BigDecimal
  volumeToken0_in: [BigDecimal!]
  volumeToken0_not_in: [BigDecimal!]
  volumeToken1: BigDecimal
  volumeToken1_not: BigDecimal
  volumeToken1_gt: BigDecimal
  volumeToken1_lt: BigDecimal
  volumeToken1_gte: BigDecimal
  volumeToken1_lte: BigDecimal
  volumeToken1_in: [BigDecimal!]
  volumeToken1_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  untrackedFeesUSD: BigDecimal
  untrackedFeesUSD_not: BigDecimal
  untrackedFeesUSD_gt: BigDecimal
  untrackedFeesUSD_lt: BigDecimal
  untrackedFeesUSD_gte: BigDecimal
  untrackedFeesUSD_lte: BigDecimal
  untrackedFeesUSD_in: [BigDecimal!]
  untrackedFeesUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  collectedFeesToken0: BigDecimal
  collectedFeesToken0_not: BigDecimal
  collectedFeesToken0_gt: BigDecimal
  collectedFeesToken0_lt: BigDecimal
  collectedFeesToken0_gte: BigDecimal
  collectedFeesToken0_lte: BigDecimal
  collectedFeesToken0_in: [BigDecimal!]
  collectedFeesToken0_not_in: [BigDecimal!]
  collectedFeesToken1: BigDecimal
  collectedFeesToken1_not: BigDecimal
  collectedFeesToken1_gt: BigDecimal
  collectedFeesToken1_lt: BigDecimal
  collectedFeesToken1_gte: BigDecimal
  collectedFeesToken1_lte: BigDecimal
  collectedFeesToken1_in: [BigDecimal!]
  collectedFeesToken1_not_in: [BigDecimal!]
  collectedFeesUSD: BigDecimal
  collectedFeesUSD_not: BigDecimal
  collectedFeesUSD_gt: BigDecimal
  collectedFeesUSD_lt: BigDecimal
  collectedFeesUSD_gte: BigDecimal
  collectedFeesUSD_lte: BigDecimal
  collectedFeesUSD_in: [BigDecimal!]
  collectedFeesUSD_not_in: [BigDecimal!]
  totalValueLockedToken0: BigDecimal
  totalValueLockedToken0_not: BigDecimal
  totalValueLockedToken0_gt: BigDecimal
  totalValueLockedToken0_lt: BigDecimal
  totalValueLockedToken0_gte: BigDecimal
  totalValueLockedToken0_lte: BigDecimal
  totalValueLockedToken0_in: [BigDecimal!]
  totalValueLockedToken0_not_in: [BigDecimal!]
  totalValueLockedToken1: BigDecimal
  totalValueLockedToken1_not: BigDecimal
  totalValueLockedToken1_gt: BigDecimal
  totalValueLockedToken1_lt: BigDecimal
  totalValueLockedToken1_gte: BigDecimal
  totalValueLockedToken1_lte: BigDecimal
  totalValueLockedToken1_in: [BigDecimal!]
  totalValueLockedToken1_not_in: [BigDecimal!]
  feesToken0: BigDecimal
  feesToken0_not: BigDecimal
  feesToken0_gt: BigDecimal
  feesToken0_lt: BigDecimal
  feesToken0_gte: BigDecimal
  feesToken0_lte: BigDecimal
  feesToken0_in: [BigDecimal!]
  feesToken0_not_in: [BigDecimal!]
  feesToken1: BigDecimal
  feesToken1_not: BigDecimal
  feesToken1_gt: BigDecimal
  feesToken1_lt: BigDecimal
  feesToken1_gte: BigDecimal
  feesToken1_lte: BigDecimal
  feesToken1_in: [BigDecimal!]
  feesToken1_not_in: [BigDecimal!]
  totalValueLockedMatic: BigDecimal
  totalValueLockedMatic_not: BigDecimal
  totalValueLockedMatic_gt: BigDecimal
  totalValueLockedMatic_lt: BigDecimal
  totalValueLockedMatic_gte: BigDecimal
  totalValueLockedMatic_lte: BigDecimal
  totalValueLockedMatic_in: [BigDecimal!]
  totalValueLockedMatic_not_in: [BigDecimal!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  totalValueLockedUSDUntracked: BigDecimal
  totalValueLockedUSDUntracked_not: BigDecimal
  totalValueLockedUSDUntracked_gt: BigDecimal
  totalValueLockedUSDUntracked_lt: BigDecimal
  totalValueLockedUSDUntracked_gte: BigDecimal
  totalValueLockedUSDUntracked_lte: BigDecimal
  totalValueLockedUSDUntracked_in: [BigDecimal!]
  totalValueLockedUSDUntracked_not_in: [BigDecimal!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  poolHourData_: PoolHourData_filter
  poolDayData_: PoolDayData_filter
  mints_: Mint_filter
  burns_: Burn_filter
  swaps_: Swap_filter
  collects_: Collect_filter
  ticks_: Tick_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Pool_filter]
  or: [Pool_filter]
}

enum Pool_orderBy {
  id
  createdAtTimestamp
  createdAtBlockNumber
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedMatic
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedMatic
  fee
  communityFee0
  communityFee1
  liquidity
  sqrtPrice
  feeGrowthGlobal0X128
  feeGrowthGlobal1X128
  token0Price
  token1Price
  tick
  observationIndex
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  feesUSD
  untrackedFeesUSD
  txCount
  collectedFeesToken0
  collectedFeesToken1
  collectedFeesUSD
  totalValueLockedToken0
  totalValueLockedToken1
  feesToken0
  feesToken1
  totalValueLockedMatic
  totalValueLockedUSD
  totalValueLockedUSDUntracked
  liquidityProviderCount
  poolHourData
  poolDayData
  mints
  burns
  swaps
  collects
  ticks
}

type Position {
  id: ID!
  owner: Bytes!
  pool: Pool!
  token0: Token!
  token1: Token!
  tickLower: Tick!
  tickUpper: Tick!
  liquidity: BigInt!
  depositedToken0: BigDecimal!
  depositedToken1: BigDecimal!
  withdrawnToken0: BigDecimal!
  withdrawnToken1: BigDecimal!
  collectedToken0: BigDecimal!
  collectedToken1: BigDecimal!
  collectedFeesToken0: BigDecimal!
  collectedFeesToken1: BigDecimal!
  transaction: Transaction!
  feeGrowthInside0LastX128: BigInt!
  feeGrowthInside1LastX128: BigInt!
  token0Tvl: BigDecimal
  token1Tvl: BigDecimal
}

type PositionSnapshot {
  id: ID!
  owner: Bytes!
  pool: Pool!
  position: Position!
  blockNumber: BigInt!
  timestamp: BigInt!
  liquidity: BigInt!
  depositedToken0: BigDecimal!
  depositedToken1: BigDecimal!
  withdrawnToken0: BigDecimal!
  withdrawnToken1: BigDecimal!
  collectedFeesToken0: BigDecimal!
  collectedFeesToken1: BigDecimal!
  transaction: Transaction!
  feeGrowthInside0LastX128: BigInt!
  feeGrowthInside1LastX128: BigInt!
}

input PositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  depositedToken0: BigDecimal
  depositedToken0_not: BigDecimal
  depositedToken0_gt: BigDecimal
  depositedToken0_lt: BigDecimal
  depositedToken0_gte: BigDecimal
  depositedToken0_lte: BigDecimal
  depositedToken0_in: [BigDecimal!]
  depositedToken0_not_in: [BigDecimal!]
  depositedToken1: BigDecimal
  depositedToken1_not: BigDecimal
  depositedToken1_gt: BigDecimal
  depositedToken1_lt: BigDecimal
  depositedToken1_gte: BigDecimal
  depositedToken1_lte: BigDecimal
  depositedToken1_in: [BigDecimal!]
  depositedToken1_not_in: [BigDecimal!]
  withdrawnToken0: BigDecimal
  withdrawnToken0_not: BigDecimal
  withdrawnToken0_gt: BigDecimal
  withdrawnToken0_lt: BigDecimal
  withdrawnToken0_gte: BigDecimal
  withdrawnToken0_lte: BigDecimal
  withdrawnToken0_in: [BigDecimal!]
  withdrawnToken0_not_in: [BigDecimal!]
  withdrawnToken1: BigDecimal
  withdrawnToken1_not: BigDecimal
  withdrawnToken1_gt: BigDecimal
  withdrawnToken1_lt: BigDecimal
  withdrawnToken1_gte: BigDecimal
  withdrawnToken1_lte: BigDecimal
  withdrawnToken1_in: [BigDecimal!]
  withdrawnToken1_not_in: [BigDecimal!]
  collectedFeesToken0: BigDecimal
  collectedFeesToken0_not: BigDecimal
  collectedFeesToken0_gt: BigDecimal
  collectedFeesToken0_lt: BigDecimal
  collectedFeesToken0_gte: BigDecimal
  collectedFeesToken0_lte: BigDecimal
  collectedFeesToken0_in: [BigDecimal!]
  collectedFeesToken0_not_in: [BigDecimal!]
  collectedFeesToken1: BigDecimal
  collectedFeesToken1_not: BigDecimal
  collectedFeesToken1_gt: BigDecimal
  collectedFeesToken1_lt: BigDecimal
  collectedFeesToken1_gte: BigDecimal
  collectedFeesToken1_lte: BigDecimal
  collectedFeesToken1_in: [BigDecimal!]
  collectedFeesToken1_not_in: [BigDecimal!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  feeGrowthInside0LastX128: BigInt
  feeGrowthInside0LastX128_not: BigInt
  feeGrowthInside0LastX128_gt: BigInt
  feeGrowthInside0LastX128_lt: BigInt
  feeGrowthInside0LastX128_gte: BigInt
  feeGrowthInside0LastX128_lte: BigInt
  feeGrowthInside0LastX128_in: [BigInt!]
  feeGrowthInside0LastX128_not_in: [BigInt!]
  feeGrowthInside1LastX128: BigInt
  feeGrowthInside1LastX128_not: BigInt
  feeGrowthInside1LastX128_gt: BigInt
  feeGrowthInside1LastX128_lt: BigInt
  feeGrowthInside1LastX128_gte: BigInt
  feeGrowthInside1LastX128_lte: BigInt
  feeGrowthInside1LastX128_in: [BigInt!]
  feeGrowthInside1LastX128_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PositionSnapshot_filter]
  or: [PositionSnapshot_filter]
}

enum PositionSnapshot_orderBy {
  id
  owner
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__fee
  pool__communityFee0
  pool__communityFee1
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__untrackedFeesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__feesToken0
  pool__feesToken1
  pool__totalValueLockedMatic
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  position
  position__id
  position__owner
  position__liquidity
  position__depositedToken0
  position__depositedToken1
  position__withdrawnToken0
  position__withdrawnToken1
  position__collectedToken0
  position__collectedToken1
  position__collectedFeesToken0
  position__collectedFeesToken1
  position__feeGrowthInside0LastX128
  position__feeGrowthInside1LastX128
  position__token0Tvl
  position__token1Tvl
  blockNumber
  timestamp
  liquidity
  depositedToken0
  depositedToken1
  withdrawnToken0
  withdrawnToken1
  collectedFeesToken0
  collectedFeesToken1
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasLimit
  transaction__gasPrice
  feeGrowthInside0LastX128
  feeGrowthInside1LastX128
}

input Position_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: Token_filter
  tickLower: String
  tickLower_not: String
  tickLower_gt: String
  tickLower_lt: String
  tickLower_gte: String
  tickLower_lte: String
  tickLower_in: [String!]
  tickLower_not_in: [String!]
  tickLower_contains: String
  tickLower_contains_nocase: String
  tickLower_not_contains: String
  tickLower_not_contains_nocase: String
  tickLower_starts_with: String
  tickLower_starts_with_nocase: String
  tickLower_not_starts_with: String
  tickLower_not_starts_with_nocase: String
  tickLower_ends_with: String
  tickLower_ends_with_nocase: String
  tickLower_not_ends_with: String
  tickLower_not_ends_with_nocase: String
  tickLower_: Tick_filter
  tickUpper: String
  tickUpper_not: String
  tickUpper_gt: String
  tickUpper_lt: String
  tickUpper_gte: String
  tickUpper_lte: String
  tickUpper_in: [String!]
  tickUpper_not_in: [String!]
  tickUpper_contains: String
  tickUpper_contains_nocase: String
  tickUpper_not_contains: String
  tickUpper_not_contains_nocase: String
  tickUpper_starts_with: String
  tickUpper_starts_with_nocase: String
  tickUpper_not_starts_with: String
  tickUpper_not_starts_with_nocase: String
  tickUpper_ends_with: String
  tickUpper_ends_with_nocase: String
  tickUpper_not_ends_with: String
  tickUpper_not_ends_with_nocase: String
  tickUpper_: Tick_filter
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  depositedToken0: BigDecimal
  depositedToken0_not: BigDecimal
  depositedToken0_gt: BigDecimal
  depositedToken0_lt: BigDecimal
  depositedToken0_gte: BigDecimal
  depositedToken0_lte: BigDecimal
  depositedToken0_in: [BigDecimal!]
  depositedToken0_not_in: [BigDecimal!]
  depositedToken1: BigDecimal
  depositedToken1_not: BigDecimal
  depositedToken1_gt: BigDecimal
  depositedToken1_lt: BigDecimal
  depositedToken1_gte: BigDecimal
  depositedToken1_lte: BigDecimal
  depositedToken1_in: [BigDecimal!]
  depositedToken1_not_in: [BigDecimal!]
  withdrawnToken0: BigDecimal
  withdrawnToken0_not: BigDecimal
  withdrawnToken0_gt: BigDecimal
  withdrawnToken0_lt: BigDecimal
  withdrawnToken0_gte: BigDecimal
  withdrawnToken0_lte: BigDecimal
  withdrawnToken0_in: [BigDecimal!]
  withdrawnToken0_not_in: [BigDecimal!]
  withdrawnToken1: BigDecimal
  withdrawnToken1_not: BigDecimal
  withdrawnToken1_gt: BigDecimal
  withdrawnToken1_lt: BigDecimal
  withdrawnToken1_gte: BigDecimal
  withdrawnToken1_lte: BigDecimal
  withdrawnToken1_in: [BigDecimal!]
  withdrawnToken1_not_in: [BigDecimal!]
  collectedToken0: BigDecimal
  collectedToken0_not: BigDecimal
  collectedToken0_gt: BigDecimal
  collectedToken0_lt: BigDecimal
  collectedToken0_gte: BigDecimal
  collectedToken0_lte: BigDecimal
  collectedToken0_in: [BigDecimal!]
  collectedToken0_not_in: [BigDecimal!]
  collectedToken1: BigDecimal
  collectedToken1_not: BigDecimal
  collectedToken1_gt: BigDecimal
  collectedToken1_lt: BigDecimal
  collectedToken1_gte: BigDecimal
  collectedToken1_lte: BigDecimal
  collectedToken1_in: [BigDecimal!]
  collectedToken1_not_in: [BigDecimal!]
  collectedFeesToken0: BigDecimal
  collectedFeesToken0_not: BigDecimal
  collectedFeesToken0_gt: BigDecimal
  collectedFeesToken0_lt: BigDecimal
  collectedFeesToken0_gte: BigDecimal
  collectedFeesToken0_lte: BigDecimal
  collectedFeesToken0_in: [BigDecimal!]
  collectedFeesToken0_not_in: [BigDecimal!]
  collectedFeesToken1: BigDecimal
  collectedFeesToken1_not: BigDecimal
  collectedFeesToken1_gt: BigDecimal
  collectedFeesToken1_lt: BigDecimal
  collectedFeesToken1_gte: BigDecimal
  collectedFeesToken1_lte: BigDecimal
  collectedFeesToken1_in: [BigDecimal!]
  collectedFeesToken1_not_in: [BigDecimal!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  feeGrowthInside0LastX128: BigInt
  feeGrowthInside0LastX128_not: BigInt
  feeGrowthInside0LastX128_gt: BigInt
  feeGrowthInside0LastX128_lt: BigInt
  feeGrowthInside0LastX128_gte: BigInt
  feeGrowthInside0LastX128_lte: BigInt
  feeGrowthInside0LastX128_in: [BigInt!]
  feeGrowthInside0LastX128_not_in: [BigInt!]
  feeGrowthInside1LastX128: BigInt
  feeGrowthInside1LastX128_not: BigInt
  feeGrowthInside1LastX128_gt: BigInt
  feeGrowthInside1LastX128_lt: BigInt
  feeGrowthInside1LastX128_gte: BigInt
  feeGrowthInside1LastX128_lte: BigInt
  feeGrowthInside1LastX128_in: [BigInt!]
  feeGrowthInside1LastX128_not_in: [BigInt!]
  token0Tvl: BigDecimal
  token0Tvl_not: BigDecimal
  token0Tvl_gt: BigDecimal
  token0Tvl_lt: BigDecimal
  token0Tvl_gte: BigDecimal
  token0Tvl_lte: BigDecimal
  token0Tvl_in: [BigDecimal!]
  token0Tvl_not_in: [BigDecimal!]
  token1Tvl: BigDecimal
  token1Tvl_not: BigDecimal
  token1Tvl_gt: BigDecimal
  token1Tvl_lt: BigDecimal
  token1Tvl_gte: BigDecimal
  token1Tvl_lte: BigDecimal
  token1Tvl_in: [BigDecimal!]
  token1Tvl_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Position_filter]
  or: [Position_filter]
}

enum Position_orderBy {
  id
  owner
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__fee
  pool__communityFee0
  pool__communityFee1
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__untrackedFeesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__feesToken0
  pool__feesToken1
  pool__totalValueLockedMatic
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedMatic
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedMatic
  tickLower
  tickLower__id
  tickLower__poolAddress
  tickLower__tickIdx
  tickLower__liquidityGross
  tickLower__liquidityNet
  tickLower__price0
  tickLower__price1
  tickLower__volumeToken0
  tickLower__volumeToken1
  tickLower__volumeUSD
  tickLower__untrackedVolumeUSD
  tickLower__feesUSD
  tickLower__collectedFeesToken0
  tickLower__collectedFeesToken1
  tickLower__collectedFeesUSD
  tickLower__createdAtTimestamp
  tickLower__createdAtBlockNumber
  tickLower__liquidityProviderCount
  tickLower__feeGrowthOutside0X128
  tickLower__feeGrowthOutside1X128
  tickUpper
  tickUpper__id
  tickUpper__poolAddress
  tickUpper__tickIdx
  tickUpper__liquidityGross
  tickUpper__liquidityNet
  tickUpper__price0
  tickUpper__price1
  tickUpper__volumeToken0
  tickUpper__volumeToken1
  tickUpper__volumeUSD
  tickUpper__untrackedVolumeUSD
  tickUpper__feesUSD
  tickUpper__collectedFeesToken0
  tickUpper__collectedFeesToken1
  tickUpper__collectedFeesUSD
  tickUpper__createdAtTimestamp
  tickUpper__createdAtBlockNumber
  tickUpper__liquidityProviderCount
  tickUpper__feeGrowthOutside0X128
  tickUpper__feeGrowthOutside1X128
  liquidity
  depositedToken0
  depositedToken1
  withdrawnToken0
  withdrawnToken1
  collectedToken0
  collectedToken1
  collectedFeesToken0
  collectedFeesToken1
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasLimit
  transaction__gasPrice
  feeGrowthInside0LastX128
  feeGrowthInside1LastX128
  token0Tvl
  token1Tvl
}

type Tick {
  id: ID!
  poolAddress: String
  tickIdx: BigInt!
  pool: Pool!
  liquidityGross: BigInt!
  liquidityNet: BigInt!
  price0: BigDecimal!
  price1: BigDecimal!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  feesUSD: BigDecimal!
  collectedFeesToken0: BigDecimal!
  collectedFeesToken1: BigDecimal!
  collectedFeesUSD: BigDecimal!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  liquidityProviderCount: BigInt!
  feeGrowthOutside0X128: BigInt!
  feeGrowthOutside1X128: BigInt!
}

type TickDayData {
  id: ID!
  date: Int!
  pool: Pool!
  tick: Tick!
  liquidityGross: BigInt!
  liquidityNet: BigInt!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  feesUSD: BigDecimal!
  feeGrowthOutside0X128: BigInt!
  feeGrowthOutside1X128: BigInt!
}

input TickDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Tick_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  volumeToken0: BigDecimal
  volumeToken0_not: BigDecimal
  volumeToken0_gt: BigDecimal
  volumeToken0_lt: BigDecimal
  volumeToken0_gte: BigDecimal
  volumeToken0_lte: BigDecimal
  volumeToken0_in: [BigDecimal!]
  volumeToken0_not_in: [BigDecimal!]
  volumeToken1: BigDecimal
  volumeToken1_not: BigDecimal
  volumeToken1_gt: BigDecimal
  volumeToken1_lt: BigDecimal
  volumeToken1_gte: BigDecimal
  volumeToken1_lte: BigDecimal
  volumeToken1_in: [BigDecimal!]
  volumeToken1_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  feeGrowthOutside0X128: BigInt
  feeGrowthOutside0X128_not: BigInt
  feeGrowthOutside0X128_gt: BigInt
  feeGrowthOutside0X128_lt: BigInt
  feeGrowthOutside0X128_gte: BigInt
  feeGrowthOutside0X128_lte: BigInt
  feeGrowthOutside0X128_in: [BigInt!]
  feeGrowthOutside0X128_not_in: [BigInt!]
  feeGrowthOutside1X128: BigInt
  feeGrowthOutside1X128_not: BigInt
  feeGrowthOutside1X128_gt: BigInt
  feeGrowthOutside1X128_lt: BigInt
  feeGrowthOutside1X128_gte: BigInt
  feeGrowthOutside1X128_lte: BigInt
  feeGrowthOutside1X128_in: [BigInt!]
  feeGrowthOutside1X128_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TickDayData_filter]
  or: [TickDayData_filter]
}

enum TickDayData_orderBy {
  id
  date
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__fee
  pool__communityFee0
  pool__communityFee1
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__untrackedFeesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__feesToken0
  pool__feesToken1
  pool__totalValueLockedMatic
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  tick
  tick__id
  tick__poolAddress
  tick__tickIdx
  tick__liquidityGross
  tick__liquidityNet
  tick__price0
  tick__price1
  tick__volumeToken0
  tick__volumeToken1
  tick__volumeUSD
  tick__untrackedVolumeUSD
  tick__feesUSD
  tick__collectedFeesToken0
  tick__collectedFeesToken1
  tick__collectedFeesUSD
  tick__createdAtTimestamp
  tick__createdAtBlockNumber
  tick__liquidityProviderCount
  tick__feeGrowthOutside0X128
  tick__feeGrowthOutside1X128
  liquidityGross
  liquidityNet
  volumeToken0
  volumeToken1
  volumeUSD
  feesUSD
  feeGrowthOutside0X128
  feeGrowthOutside1X128
}

type TickHourData {
  id: ID!
  periodStartUnix: Int!
  pool: Pool!
  tick: Tick!
  liquidityGross: BigInt!
  liquidityNet: BigInt!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  feesUSD: BigDecimal!
}

input TickHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  periodStartUnix: Int
  periodStartUnix_not: Int
  periodStartUnix_gt: Int
  periodStartUnix_lt: Int
  periodStartUnix_gte: Int
  periodStartUnix_lte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Tick_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  volumeToken0: BigDecimal
  volumeToken0_not: BigDecimal
  volumeToken0_gt: BigDecimal
  volumeToken0_lt: BigDecimal
  volumeToken0_gte: BigDecimal
  volumeToken0_lte: BigDecimal
  volumeToken0_in: [BigDecimal!]
  volumeToken0_not_in: [BigDecimal!]
  volumeToken1: BigDecimal
  volumeToken1_not: BigDecimal
  volumeToken1_gt: BigDecimal
  volumeToken1_lt: BigDecimal
  volumeToken1_gte: BigDecimal
  volumeToken1_lte: BigDecimal
  volumeToken1_in: [BigDecimal!]
  volumeToken1_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TickHourData_filter]
  or: [TickHourData_filter]
}

enum TickHourData_orderBy {
  id
  periodStartUnix
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__fee
  pool__communityFee0
  pool__communityFee1
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__untrackedFeesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__feesToken0
  pool__feesToken1
  pool__totalValueLockedMatic
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  tick
  tick__id
  tick__poolAddress
  tick__tickIdx
  tick__liquidityGross
  tick__liquidityNet
  tick__price0
  tick__price1
  tick__volumeToken0
  tick__volumeToken1
  tick__volumeUSD
  tick__untrackedVolumeUSD
  tick__feesUSD
  tick__collectedFeesToken0
  tick__collectedFeesToken1
  tick__collectedFeesUSD
  tick__createdAtTimestamp
  tick__createdAtBlockNumber
  tick__liquidityProviderCount
  tick__feeGrowthOutside0X128
  tick__feeGrowthOutside1X128
  liquidityGross
  liquidityNet
  volumeToken0
  volumeToken1
  volumeUSD
  feesUSD
}

input Tick_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolAddress: String
  poolAddress_not: String
  poolAddress_gt: String
  poolAddress_lt: String
  poolAddress_gte: String
  poolAddress_lte: String
  poolAddress_in: [String!]
  poolAddress_not_in: [String!]
  poolAddress_contains: String
  poolAddress_contains_nocase: String
  poolAddress_not_contains: String
  poolAddress_not_contains_nocase: String
  poolAddress_starts_with: String
  poolAddress_starts_with_nocase: String
  poolAddress_not_starts_with: String
  poolAddress_not_starts_with_nocase: String
  poolAddress_ends_with: String
  poolAddress_ends_with_nocase: String
  poolAddress_not_ends_with: String
  poolAddress_not_ends_with_nocase: String
  tickIdx: BigInt
  tickIdx_not: BigInt
  tickIdx_gt: BigInt
  tickIdx_lt: BigInt
  tickIdx_gte: BigInt
  tickIdx_lte: BigInt
  tickIdx_in: [BigInt!]
  tickIdx_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  price0: BigDecimal
  price0_not: BigDecimal
  price0_gt: BigDecimal
  price0_lt: BigDecimal
  price0_gte: BigDecimal
  price0_lte: BigDecimal
  price0_in: [BigDecimal!]
  price0_not_in: [BigDecimal!]
  price1: BigDecimal
  price1_not: BigDecimal
  price1_gt: BigDecimal
  price1_lt: BigDecimal
  price1_gte: BigDecimal
  price1_lte: BigDecimal
  price1_in: [BigDecimal!]
  price1_not_in: [BigDecimal!]
  volumeToken0: BigDecimal
  volumeToken0_not: BigDecimal
  volumeToken0_gt: BigDecimal
  volumeToken0_lt: BigDecimal
  volumeToken0_gte: BigDecimal
  volumeToken0_lte: BigDecimal
  volumeToken0_in: [BigDecimal!]
  volumeToken0_not_in: [BigDecimal!]
  volumeToken1: BigDecimal
  volumeToken1_not: BigDecimal
  volumeToken1_gt: BigDecimal
  volumeToken1_lt: BigDecimal
  volumeToken1_gte: BigDecimal
  volumeToken1_lte: BigDecimal
  volumeToken1_in: [BigDecimal!]
  volumeToken1_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  collectedFeesToken0: BigDecimal
  collectedFeesToken0_not: BigDecimal
  collectedFeesToken0_gt: BigDecimal
  collectedFeesToken0_lt: BigDecimal
  collectedFeesToken0_gte: BigDecimal
  collectedFeesToken0_lte: BigDecimal
  collectedFeesToken0_in: [BigDecimal!]
  collectedFeesToken0_not_in: [BigDecimal!]
  collectedFeesToken1: BigDecimal
  collectedFeesToken1_not: BigDecimal
  collectedFeesToken1_gt: BigDecimal
  collectedFeesToken1_lt: BigDecimal
  collectedFeesToken1_gte: BigDecimal
  collectedFeesToken1_lte: BigDecimal
  collectedFeesToken1_in: [BigDecimal!]
  collectedFeesToken1_not_in: [BigDecimal!]
  collectedFeesUSD: BigDecimal
  collectedFeesUSD_not: BigDecimal
  collectedFeesUSD_gt: BigDecimal
  collectedFeesUSD_lt: BigDecimal
  collectedFeesUSD_gte: BigDecimal
  collectedFeesUSD_lte: BigDecimal
  collectedFeesUSD_in: [BigDecimal!]
  collectedFeesUSD_not_in: [BigDecimal!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  feeGrowthOutside0X128: BigInt
  feeGrowthOutside0X128_not: BigInt
  feeGrowthOutside0X128_gt: BigInt
  feeGrowthOutside0X128_lt: BigInt
  feeGrowthOutside0X128_gte: BigInt
  feeGrowthOutside0X128_lte: BigInt
  feeGrowthOutside0X128_in: [BigInt!]
  feeGrowthOutside0X128_not_in: [BigInt!]
  feeGrowthOutside1X128: BigInt
  feeGrowthOutside1X128_not: BigInt
  feeGrowthOutside1X128_gt: BigInt
  feeGrowthOutside1X128_lt: BigInt
  feeGrowthOutside1X128_gte: BigInt
  feeGrowthOutside1X128_lte: BigInt
  feeGrowthOutside1X128_in: [BigInt!]
  feeGrowthOutside1X128_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Tick_filter]
  or: [Tick_filter]
}

enum Tick_orderBy {
  id
  poolAddress
  tickIdx
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__fee
  pool__communityFee0
  pool__communityFee1
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__untrackedFeesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__feesToken0
  pool__feesToken1
  pool__totalValueLockedMatic
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  liquidityGross
  liquidityNet
  price0
  price1
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  feesUSD
  collectedFeesToken0
  collectedFeesToken1
  collectedFeesUSD
  createdAtTimestamp
  createdAtBlockNumber
  liquidityProviderCount
  feeGrowthOutside0X128
  feeGrowthOutside1X128
}

type PancakeDayData {
  id: ID!
  date: Int!
  dailyVolumeETH: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyVolumeUntracked: BigDecimal!
  totalVolumeETH: BigDecimal!
  totalLiquidityETH: BigDecimal!
  totalVolumeUSD: BigDecimal!
  totalLiquidityUSD: BigDecimal!
  txCount: BigInt!
}

input PancakeDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  dailyVolumeETH: BigDecimal
  dailyVolumeETH_not: BigDecimal
  dailyVolumeETH_gt: BigDecimal
  dailyVolumeETH_lt: BigDecimal
  dailyVolumeETH_gte: BigDecimal
  dailyVolumeETH_lte: BigDecimal
  dailyVolumeETH_in: [BigDecimal!]
  dailyVolumeETH_not_in: [BigDecimal!]
  dailyVolumeUSD: BigDecimal
  dailyVolumeUSD_not: BigDecimal
  dailyVolumeUSD_gt: BigDecimal
  dailyVolumeUSD_lt: BigDecimal
  dailyVolumeUSD_gte: BigDecimal
  dailyVolumeUSD_lte: BigDecimal
  dailyVolumeUSD_in: [BigDecimal!]
  dailyVolumeUSD_not_in: [BigDecimal!]
  dailyVolumeUntracked: BigDecimal
  dailyVolumeUntracked_not: BigDecimal
  dailyVolumeUntracked_gt: BigDecimal
  dailyVolumeUntracked_lt: BigDecimal
  dailyVolumeUntracked_gte: BigDecimal
  dailyVolumeUntracked_lte: BigDecimal
  dailyVolumeUntracked_in: [BigDecimal!]
  dailyVolumeUntracked_not_in: [BigDecimal!]
  totalVolumeETH: BigDecimal
  totalVolumeETH_not: BigDecimal
  totalVolumeETH_gt: BigDecimal
  totalVolumeETH_lt: BigDecimal
  totalVolumeETH_gte: BigDecimal
  totalVolumeETH_lte: BigDecimal
  totalVolumeETH_in: [BigDecimal!]
  totalVolumeETH_not_in: [BigDecimal!]
  totalLiquidityETH: BigDecimal
  totalLiquidityETH_not: BigDecimal
  totalLiquidityETH_gt: BigDecimal
  totalLiquidityETH_lt: BigDecimal
  totalLiquidityETH_gte: BigDecimal
  totalLiquidityETH_lte: BigDecimal
  totalLiquidityETH_in: [BigDecimal!]
  totalLiquidityETH_not_in: [BigDecimal!]
  totalVolumeUSD: BigDecimal
  totalVolumeUSD_not: BigDecimal
  totalVolumeUSD_gt: BigDecimal
  totalVolumeUSD_lt: BigDecimal
  totalVolumeUSD_gte: BigDecimal
  totalVolumeUSD_lte: BigDecimal
  totalVolumeUSD_in: [BigDecimal!]
  totalVolumeUSD_not_in: [BigDecimal!]
  totalLiquidityUSD: BigDecimal
  totalLiquidityUSD_not: BigDecimal
  totalLiquidityUSD_gt: BigDecimal
  totalLiquidityUSD_lt: BigDecimal
  totalLiquidityUSD_gte: BigDecimal
  totalLiquidityUSD_lte: BigDecimal
  totalLiquidityUSD_in: [BigDecimal!]
  totalLiquidityUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PancakeDayData_filter]
  or: [PancakeDayData_filter]
}

enum PancakeDayData_orderBy {
  id
  date
  dailyVolumeETH
  dailyVolumeUSD
  dailyVolumeUntracked
  totalVolumeETH
  totalLiquidityETH
  totalVolumeUSD
  totalLiquidityUSD
  txCount
}

type PancakeFactory {
  id: ID!
  pairCount: Int!
  totalVolumeUSD: BigDecimal!
  totalVolumeBNB: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  totalLiquidityUSD: BigDecimal!
  totalLiquidityBNB: BigDecimal!
  txCount: BigInt!
}

input PancakeFactory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: Int
  pairCount_not: Int
  pairCount_gt: Int
  pairCount_lt: Int
  pairCount_gte: Int
  pairCount_lte: Int
  pairCount_in: [Int!]
  pairCount_not_in: [Int!]
  totalVolumeUSD: BigDecimal
  totalVolumeUSD_not: BigDecimal
  totalVolumeUSD_gt: BigDecimal
  totalVolumeUSD_lt: BigDecimal
  totalVolumeUSD_gte: BigDecimal
  totalVolumeUSD_lte: BigDecimal
  totalVolumeUSD_in: [BigDecimal!]
  totalVolumeUSD_not_in: [BigDecimal!]
  totalVolumeBNB: BigDecimal
  totalVolumeBNB_not: BigDecimal
  totalVolumeBNB_gt: BigDecimal
  totalVolumeBNB_lt: BigDecimal
  totalVolumeBNB_gte: BigDecimal
  totalVolumeBNB_lte: BigDecimal
  totalVolumeBNB_in: [BigDecimal!]
  totalVolumeBNB_not_in: [BigDecimal!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  totalLiquidityUSD: BigDecimal
  totalLiquidityUSD_not: BigDecimal
  totalLiquidityUSD_gt: BigDecimal
  totalLiquidityUSD_lt: BigDecimal
  totalLiquidityUSD_gte: BigDecimal
  totalLiquidityUSD_lte: BigDecimal
  totalLiquidityUSD_in: [BigDecimal!]
  totalLiquidityUSD_not_in: [BigDecimal!]
  totalLiquidityBNB: BigDecimal
  totalLiquidityBNB_not: BigDecimal
  totalLiquidityBNB_gt: BigDecimal
  totalLiquidityBNB_lt: BigDecimal
  totalLiquidityBNB_gte: BigDecimal
  totalLiquidityBNB_lte: BigDecimal
  totalLiquidityBNB_in: [BigDecimal!]
  totalLiquidityBNB_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PancakeFactory_filter]
  or: [PancakeFactory_filter]
}

enum PancakeFactory_orderBy {
  id
  pairCount
  totalVolumeUSD
  totalVolumeBNB
  untrackedVolumeUSD
  totalLiquidityUSD
  totalLiquidityBNB
  txCount
}